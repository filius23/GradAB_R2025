# Visualization with `{ggplot2}`

```{r setup1, echo = F, include=FALSE}
if(Sys.getenv("USERNAME") == "filse" ) path <- "D:/uolCloud/RFS/"
library(haven)
library(tidyverse)
library(patchwork)
library(gt)
library(scico)
knitr::opts_chunk$set(message = F,warning = F,highlight = "#<<",cache = T,
                      out.height= "65%", out.width = "65%", fig.align="center")
# https://wtoivo.github.io/SGSSS-data-viz-workshop/bar-plots.html
# pend <- haven::read_dta("./data/BIBBBAuA_2018_suf1.0.dta")

library(haven)
pend <- read_dta("./orig/PENDDAT_cf_W13.dta")

tab_df <- xtabs(~zpsex+casmin, data = pend) %>% data.frame()

theme_set(new = theme_gray(base_size = 15))

# pend$palter[pend$palter>100] <- NA
# pend$casmin[pend$casmin<0] <- NA
```


In addition to key figures/tables, distributions can and should also be visualized. `{ggplot2}` offers a huge variety of options for this.

`{ggplot2}` is part of the `{tidyverse}`, which means we can either load only `{ggplot2}` or the entire `{tidyverse}` collection:
```{r}
#| eval: false
library(haven) # for data import
library(tidyverse)
# library(ggplot2) # not necessary if tidyverse is loaded
```


First, let's look at how to create a scatterplot:

```{r, out.height= "80%", out.width= "80%", fig.align="center", echo = F}
#| warning: false
library(haven)
pend %>%
  filter(welle==13) %>% 
  mutate(zpsex_fct = factor(zpsex, levels = 1:2, labels = c("Men","Women")),
         palter = ifelse(palter < 0,NA,palter),
         azges1  = ifelse(azges1 < 0,NA,azges1)
         ) %>%
ggplot(aes(x = palter, y = azges1)) +
  geom_point(aes(color = zpsex_fct)) +
  # facet_grid(~zpsex_fct) +
  theme_minimal() +
  labs(color = "Gender", y = "Work Hours/Week",
       x = "Age") +
  scale_color_manual(values = c("lightskyblue4","navy"))
```

Data for our graph is from the `pend` dataset, which contains information on working hours, as well as the gender and age of the respondents:
```{r}
#| eval: false
library(haven)
pend <- read_dta("./orig/PENDDAT_cf_W13.dta")
```
```{r}
pend %>% select(azges1,zpsex,palter) %>% head()
```

To keep the graph manageable, we only use observations from wave 13:
```{r}
pend_small <- pend %>% filter(welle==13)
```

...and we'll overwrite all missing values with `NA`. 
We'll see later in Chapter 6 how to do this more efficiently.
```{r}
pend_small$palter[pend_small$palter>100] <- NA 
pend_small$casmin[pend_small$casmin<0] <- NA
pend_small$PAS0100[pend_small$PAS0100<0] <- NA
pend_small$azges1[pend_small$azges1<0] <- NA
```

...alternatively, we use `ifelse()` and `across()` [see here](#ifelse):
```{r}
# pend_small$palter[pend_small$palter>100] <- NA 
# pend_small <-
#   pend_small %>%
#   mutate(across(c("casmin", "PAS0100", "azges1"),  ~ ifelse(.x < 0, NA, .x)))
pend_small <- pend %>% 
  filter(welle==13, palter < 100,
         casmin >0 , PAS0100 > 0 , azges1 > 0)
```


## ggplot2 and the Grammar of Graphics 

`ggplot2` is the implementation of the concept of "layered grammar of graphics" in R. The idea of this visualization system is to break down data visualization into parameters: the underlying dataset, the variables to be displayed, the choice of display shapes, the coordinate system, scales, and statistical transformations. A standard command in `ggplot2` looks something like this:

```{r,eval=F}
ggplot(data = dataset, aes(x = var1, y = var2, color = var3)) +
  geom_point() +
  labs(title= "Title", subtitle = "Subtitle") +
  theme_minimal()
```
So we first call up a plot with `ggplot()`. Further arguments then define additional aspects:  

+ With `data = `, we specify the `data.frame` we want to visualize.
+ The aesthetics `aes()` specify which variables are to be displayed: here `var1` on the x-axis, `var2` on the y-axis, and `var3` for coloring.
+ The layers `geom_..` specify the type of display, e.g., `geom_point()` for point plots and `geom_bar()` for bar charts.
+ With `labs`, we can add labels, such as a title or axis labels.
+ The themes `theme_...` set the design of the graphic, e.g., black and white axes and background colors with `theme_bw()`.

Now we will work through the individual *layers* of the graphic:

### `data =`

In `data =`, we specify the `data.frame` that contains the information to be visualized. We start our ggplot with:
```{r}
ggplot(data = pend_small)
```


### `aes` 

We want to visualize these values in a scatterplot, with age on the x-axis and weekly working hours on the y-axis:
```{r}
#| warning: false
ggplot(data = pend_small, aes(x = palter, y = azges1))
```

### `geom`
If we only provide these details, we will get an empty coordinate system—why? Because we haven't yet specified what *form* of display we want. For this, we must specify a `geom_`, such as `geom_col()` for bar charts, which we attach to the `ggplot` command with `+`:
```{r}
ggplot(data = pend_small, aes(x = palter, y = azges1)) + geom_point()
```
With `color =`, we can also change the color of the points:
```{r}
ggplot(data = pend_small, aes(x = palter, y = azges1)) + geom_point(color = "orange")
```
[Here](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) is an overview of all color names that are recognized, though there are many more colors—see [Appendix](#farben).

### `aes()` Part II
This already looks pretty good, but the points are not yet separated by gender. 
To do this, we need to include the gender information (`zpsex`) in `aes()`.
In addition to the axes, `aes()` also specifies the variables for the appearance of the `geom_`s—this can include not only color but also shape, size, or transparency. [Here's an overview](#aes_list).

Gender should determine the color of the points, which we can specify in `aes` with `color`:
```{r}
#| error=TRUE
# results in an error due to labels:
ggplot(data = pend_small, aes(x = palter, y = azges1, color = zpsex )) + 
  geom_point()
```

A numeric variable for `color =` results in a color gradient, while a `factor`/`character` variable results in a discrete color scale:
```{r}
#| layout-ncol: 2
ggplot(data = pend_small, aes(x = palter, y = azges1, color = as.numeric(zpsex))) + 
  geom_point()
ggplot(data = pend_small, aes(x = palter, y = azges1, color = as.factor(zpsex))) + 
  geom_point()
ggplot(data = pend_small, aes(x = palter, y = azges1, color = as.character(zpsex))) + 
  geom_point()
```

We can also specify custom colors with `scale_color_manual`[^2], and a list of possible colors can be found [**here**](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf).

[^2]: If we had specified `color` in `aes`, the corresponding command would be `scale_color_manual`.
```{r}
ggplot(data = pend_small, aes(x = palter, y = azges1, color = as.factor(zpsex))) + 
  geom_point() + 
  scale_color_manual(values = c("lightskyblue4","navy"))
```


### Labels

With the `breaks` and `labels` options, we can also edit the legend labels. To do this, we first specify the levels of the gender variable in `breaks` and then the corresponding labels in the same order:
```{r, out.height= "75%", out.width = "75%", fig.align="center"}
ggplot(data = pend_small, aes(x = palter, y = azges1, color = as.factor(zpsex))) + 
  geom_point() + 
  scale_color_manual(values = c("lightskyblue4","navy"),
                    breaks = c(1,2), labels = c("Men", "Women") )
```
Finally, we adjust the labels with `labs`, where we have the following options:

+ `title`: Title for the graphic
+ `subtitle`:  Subtitle for the title
+ `caption`: Annotation below the graphic
+ `x`: x-axis label
+ `y`: y-axis label
+ `fill`: Legend label when `fill` is specified in `aes()`
+ `color`: Legend label when `color` is specified in `aes()`
+ `linetype`: Legend label when `linetype` is specified in `aes()`


## Combination of all options
```{r fllplt1}
#| out-height: 60%
#| out-width: 100%
#| cache: true
ggplot(data = pend_small, aes(x = palter, y = azges1, 
                               shape = as.factor(zpsex),
                               color = as.factor(zpsex))) + 
  geom_point(size = 4) + 
  scale_color_manual(values = c("lightskyblue4","orange"),
                     breaks = c(1,2), labels = c("Men", "Women")
                     ) +
  scale_shape_manual(values = c(18,20),
                     breaks = c(1,2), labels = c("Men", "Women")
                     ) +
  labs(color = "Gender", 
       shape = "Gender",
       y = "Hours/Week",
       x = "Age",
       title = "Working hours and age",
       subtitle = "By Gender",
       caption = "Soruce: PASS CF 0619"
       ) 
```

[Übersicht zu shapes](#shape1)

### [Exercise](#pltue1) {#ue4_01}

## Visualizing distributions 

```{r}
#| echo: false
theme_set(new = theme_grey(base_size = 14))
```


With the following syntax we can create a boxplot using `ggplot2`. Since we are only considering one variable, we only need to specify `y = ` or `x =` depending on whether the box should be oriented vertically or horizontally.
```{r}
#| layout-ncol: 2
ggplot(data = pend_small, aes(y = azges1)) + geom_boxplot()
ggplot(data = pend_small, aes(x = azges1)) + geom_boxplot()
```

We can also create separate boxplots for men and women by specifying a variable for the other axis:
```{r}
ggplot(data = pend_small, aes(y = azges1, x = factor(zpsex))) + geom_boxplot()
```
### Histogram

We can also describe distributions using a histogram using the `geom_histogram()` function.
If we want to change the color, `fill =` is the correct option instead of `color =`:
```{r}
#| layout-ncol: 2
ggplot(data = pend_small, aes(x = azges1)) + 
  geom_histogram()  
ggplot(data = pend_small, aes(x = azges1)) + 
  geom_histogram(fill = "sienna1")  
```

To split the histogram by gender, we can again specify `fill` as an aesthetic. With `position = position_dodge()`, we can place the bars side by side:
```{r}
#| cache: true
#| layout-ncol: 2
ggplot(data = pend_small, aes(x = azges1, fill = factor(zpsex))) + 
  geom_histogram() 

ggplot(data = pend_small, aes(x = azges1, fill = factor(zpsex))) + 
  geom_histogram(position = position_dodge()) 
```

The `scale_...manual` commands still work here, but as `scale_fill_manual` instead of `scale_color_manual`:
```{r}
#| cache: true
ggplot(data = pend_small, aes(x = azges1, fill = factor(zpsex))) + 
  geom_histogram(position = position_dodge()) +
  scale_fill_manual(values = c("sienna1","dodgerblue4"),
                    breaks = 1:2, labels = c("Männer","Frauen")) +
  labs(fill = "Geschlecht")
```

### [Exercise](#pltue2) {#ue4_02}

## Categorical variables

Next, we’ll look at a way to visualize the contingency table from [Chapter 2](03_desc.qmd#crosscount):
```{r}
#| label: "table041"
pend_small$PD0400[pend_small$PD0400<0] <- NA # exclude missings
pend_small %>% 
  count(zpsex, PD0400) %>% 
  filter(!is.na(PD0400))
```

With `geom_bar()`, we can create bars by setting the height as the count of observations with `..count..` for y:
```{r}
#| cache: true
pend_small %>% 
  count(zpsex, PD0400) %>% 
  filter(!is.na(PD0400)) %>% 
  ggplot(data = ., aes(x = as_factor(PD0400), fill = factor(zpsex),
                       y = n)) +
  geom_col(position = position_dodge()) 
```

How do we get relative frequencies? 
We add `mutate(pct = prop.table(n), .by = zpsex)` to our pipe.
With `scale_y_continuous(labels = scales::label_percent(accuracy = 1))`, we can also display percentages on the y-axis.
To create a bar chart instead of a column chart, simply swap `x` and `y` and adjust the percentage labels using `scale_x_continuous`:
```{r}
#| cache: true
#| layout-ncol: 2
pend_small %>% 
  count(zpsex, PD0400) %>% 
  filter(!is.na(PD0400)) %>% 
  mutate(pct = prop.table(n), .by = zpsex) %>% 
  ggplot(data = ., aes(x = as_factor(PD0400), fill = factor(zpsex),
                       y = pct )) +
  geom_col(position = position_dodge()) +
  scale_y_continuous(labels = scales::label_percent(accuracy = 1)) 
# horizontal -> swap x and y axis
pend_small %>% 
  count(zpsex, PD0400) %>% 
  filter(!is.na(PD0400)) %>% 
  mutate(pct = prop.table(n), .by = zpsex) %>% 
  ggplot(data = ., aes(y = as_factor(PD0400), fill = factor(zpsex),
                       x = pct )) +
  geom_col(position = position_dodge()) +
  scale_x_continuous(labels = scales::label_percent(accuracy = 1)) 
```

These charts can also be customized with `scale_...` and labeled in detail using `labs()`—all options are consistent across different types of visualizations. Additionally, we can label the categories ourselves with `breaks =` and `labels =` if we don't like the default labels:

```{r fullplot}
pend_small %>% 
  count(zpsex, PD0400) %>% 
  filter(!is.na(PD0400)) %>% 
  mutate(pct = prop.table(n), .by = zpsex) %>% 
  ggplot(data = ., aes(y = as_factor(PD0400), 
                       fill = factor(zpsex),
                       x = pct )) +
  geom_col(position = position_dodge()) +
  scale_fill_manual(values = c("deepskyblue3","deepskyblue4"),
                    breaks = c(1,2), labels = c("Men", "Women")) +
  scale_x_continuous(labels = scales::label_percent(accuracy = 1)) +
  labs(title = "Religiösität nach Geschlecht",
       subtitle = "Relative Häufigkeiten",
       caption = "Quelle: PASS-CF 0619",
       y = "Religiösität",
       x = "Relative Häufigkeit",
       fill = "Geschlecht" ) 
```
### [Exercise](#pltue3) {#ue4_03}

## Exercises

To keep the data simple, you can use the following command:

```{r}
#| eval: false
pend <- 
  haven::read_dta("./orig/PENDDAT_cf_W13.dta", 
    col_select = c("zpsex", "welle", "bilzeit", "PA0445", "PG1270", "PEO0400c")
  )
```

### Exercise 1 {#pltue1}

Use this data set:
```{r}
#| eval: false
pend_u41 <- 
  pend %>% 
  filter(welle == 13, bilzeit > 0, PA0445 > 0) %>% 
  mutate(zpsex = factor(zpsex))
```

+ Create a scatter plot for the variables "Duration of total unemployment experience in months" (`PA0445`, y-axis) and "Duration of education" (`bilzeit`, x-axis).
+ Set the color to differentiate between men and women (`zpsex`).
+ Change the colors to `goldenrod1` and `dodgerblue4` (or any other [from this list](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf)).
+ Label the axes and legend!

[Back to top](#ue4_01)

### *Exercise 2* {#pltue2}

Use this data set:
```{r}
#| eval: false
pend_u42 <- 
  pend %>% 
  filter(welle == 9, PG1270 > 0) 
```

+ Create a boxplot or histogram for the distribution of the number of cigarettes and cigarillos smoked per day (in the last week) (`PG1270`).
+ Customize this graphic so that the distributions for men and women are shown separately.
+ How can you also set the colors based on gender? (Remember `color =` and `fill =`).
+ Change the bar colors using `scale_color_manual`, `scale_color_brewer`, or `scale_color_viridis` (see the sections [Colors](#farben), [ColorBrewer](#brewer), and [viridis](#viridis) under "other options").

[Back to top](#ue4_02)

### Exercise 3 {#pltue3}

Use this data set:
```{r}
#| eval: false
pend_u43 <- 
  pend %>% 
  filter(welle == 11, PEO0400c > 0) 
```

+ Create a bar chart for the responses to the question, "A working mother can have just as close a relationship with her children as a mother who is not employed." (`PEO0400c`).
+ Create a bar chart for `PEO0400c` separated by the `migration` variable, so set the bar colors based on `migration`. The `migration` variable captures whether the respondents have a migration background:

```{r}
#| echo: false
library(flextable)
set_flextable_defaults(font.family = "Red Hat Display", font.color = "grey25", border.color = "grey25", font.size = 8, padding = .75)
c(attributes(pend$PEO0400c)$labels, 
  attributes(pend$migration)$labels) %>%
  enframe(name = "label") %>%
  filter(value > 0) %>%
  mutate(Variable = c("`PEO0400c`", rep("", 3), "`migration`", rep("", 3))) %>% 
  relocate(Variable, value) %>%
  flextable() %>% 
  border_remove() %>% 
  autofit() %>% 
  padding(j = 2, padding.left = 5, padding.right = 15) %>% 
  align(align = "left", part = "header")
```

[Back to top](#ue4_03)

## More options for `{ggplot2}` 

### Aesthetics {#aes_list}

```{r}
#| echo: false
#| warning: false
#| message: false
eg <- tribble(
  ~x, ~y, ~size, ~x1,
  "A", 1, 5, 1,
  "B", 1, 10, 2,
  "C", 1, 15, 3
)
# #| fig-asp: 0.3 

eg_theme <- 
  theme(axis.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(), 
        aspect.ratio = .5,
        plot.title = element_text(size = rel(1.3),hjust = 0.5, family = "Red Hat Display"))

aes_clr <- 
  ggplot(eg, aes(x = x, y = y, color = x)) +
    geom_point(size = 5) +
    guides(color = FALSE) +
    labs(title = "color (discrete)") +
    eg_theme   

aes_clrc <- 
  ggplot(eg, aes(x = x1, y = y, color = x1)) +
    geom_point(size = 5) +
    guides(color = FALSE) +
    coord_cartesian(xlim = c(0.5, 3.5)) +
    labs(title=  "color (continuous)") +
    eg_theme

aes_size <- 
  ggplot(eg, aes(x = x, y = y, size = x)) +
    geom_point() +
    scale_size_discrete(range = c(1.5, 10)) +
    guides(size = FALSE) +
    labs(title = "size") +
    eg_theme 
  
aes_fill <-   
  ggplot(eg, aes(x = x, y = y, fill = x)) +
    geom_point(size = 5, pch = 21, stroke = 1.5) +
    guides(fill = FALSE) +
    eg_theme+ 
  labs(title = "fill")

aes_shape <- 
  ggplot(eg, aes(x = x, y = y, shape = x)) +
    geom_point(size = 5) +
    guides(shape = FALSE) +
    eg_theme + 
    labs(title = "shape")
# Alpha

aes_alpha <- 
  ggplot(eg, aes(x = x, y = y, alpha = x)) +
    geom_point(size = 5) +
    guides(alpha = FALSE) +
    eg_theme +
  labs(title="alpha")


aes_clr + aes_size + aes_shape + 
aes_clrc + aes_fill + aes_alpha +
  plot_layout(ncol =3)
```

### themes {#themes} 

With so-called themes, we can change the layout of the graphic. Other themes include `theme_light()`, `theme_classic()`, or `theme_void()`. A full list can be found [here](https://ggplot2.tidyverse.org/reference/ggtheme.html). Additionally, the [{ggthemes}](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes) package (`install.packages('ggthemes')`) offers a wide selection.

```{r}
#| eval: false
ggplot(data = pend_small, aes(x = palter, y = azges1, color = factor(zpsex))) + 
  geom_point(size = 2) + 
  theme_minimal()

ggplot(data = pend_small, aes(x = palter, y = azges1, color = factor(zpsex))) + 
  geom_point(size = 2) +
  theme_dark()
```


```{r}
#| layout-ncol: 2
#| echo: false

p1 <- ggplot(data = pend_small, aes(x = palter, y = azges1, color = factor(zpsex))) + 
  geom_point(size = 2) 

p1 + theme_gray() + labs(title="theme_grey() - Standard") + theme(plot.title = element_text(size = rel(2.5),hjust = 0.5))
p1 + theme_bw() + labs(title="theme_bw()") + theme(plot.title = element_text(size = rel(2.5),hjust = 0.5))
p1 + theme_minimal() + labs(title="theme_minimal()") + theme(plot.title = element_text(size = rel(2.5),hjust = 0.5))
p1 + theme_dark() + labs(title="theme_dark()") + theme(plot.title = element_text(size = rel(2.5),hjust = 0.5))
p1 + theme_void() + labs(title="theme_void()") + theme(plot.title = element_text(size = rel(2.5),hjust = 0.5))
```
### Colors {#colors}

```{r}
p1 <- ggplot(data = pend_small, aes(x = palter, y = azges1, color = factor(zpsex))) + 
  geom_point(size = 3) 
```

In addition to the colors used in the example for `fill`, countless other colors can be used with `scale_fill_manual` and `scale_color_manual`:

+ [Here](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) you can find an overview of all color names that are recognized.
+ Alternatively, HEX codes can also be specified, which can be created using tools like the [Adobe Color Wheel](https://color.adobe.com/de/create/color-wheel) or [Color Hex](https://www.color-hex.com/).

```{r}
#| layout-ncol: 2
p1 +  scale_color_manual(values = c("dodgerblue4","sienna1"),
                    breaks = c(1,2), labels = c("Men", "Women") )

p1 +  scale_color_manual(values = c("#005b96","#6497b1"),
                    breaks = c(1,2), labels = c("Men", "Women") )
```

#### ColorBrewer {#brewer}

As an alternative to manually selecting colors with `scale_fill_manual` and `scale_color_manual`, you can use predefined color palettes from *colorbrewer* with `scale_fill_brewer()`. Simply use `scale_fill_brewer()` instead of `scale_fill_manual` and specify one of the palettes instead of `values`—an overview can be found [here](http://colorbrewer2.org/). ColorBrewer palettes are integrated into ggplot2.

```{r}
p1 +
  scale_color_brewer(palette = "RdYlBu",
                    breaks = c(1,2), labels = c("Men", "Women") ) 
```

#### viridis {#viridis}

Similarly, there are [{viridis}](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) palettes, which are "colorblind-safe" and are also integrated into {ggplot2}. However, note that for color selections based on a categorical variable, `scale_color_viridis_d()` should be used. For determining color along a numerical/metric variable, `scale_color_viridis_c()` should be used. Additionally, you can adjust the width of the color scale with `begin` and `end`:

```{r}
#| layout-ncol: 2
p1 +
  scale_color_viridis_d(option="magma",
                    breaks = c(1,2), labels = c("Men", "Women") ) 
p1 +
  scale_color_viridis_d(option="magma",begin = .65,end = .85,
                    breaks = c(1,2), labels = c("Men", "Women") ) 
```

```{r}
#| fig-height: 2
#| echo: false
knitr::include_graphics("./pic/104_viridis-scales.png")
```

#### Additional Color Palettes

In addition, there are countless packages that also offer `scale_color_` and `scale_fill_` functions:
Here are two examples with [{scico}](https://github.com/thomasp85/scico) and [{MetBrewer}](https://github.com/BlakeRMills/MetBrewer), which contains colors from images in the Metropolitan Museum of Art:

```{r, eval =F}
install.packages('scico')
install.packages("MetBrewer")
```

[{scico}](https://github.com/thomasp85/scico) color palettes
```{r}
#| echo: false
#| out-height: 60%
scico::scico_palette_show()
```

[{MetBrewer}](https://github.com/BlakeRMills/MetBrewer) color palettes
```{r}
#| out-width: 100%
#| echo: false
knitr::include_graphics("./pic/104_metbrewer.png")
```

```{r}
#| layout-ncol: 2
library(scico)
p1 +
  scale_color_scico_d(palette = "oslo",begin = .5,end = .8,
                    breaks = c(1,2), labels = c("Men", "Women") ) 


library(MetBrewer)
p1 +
  scale_color_met_d(name = "Kandinsky",
                    breaks = c(1,2), labels = c("Men", "Women") ) 
```

Comparable packages also exist for:

+ [{DutchMasters}](https://github.com/EdwinTh/dutchmasters) - Color palettes from paintings by Dutch masters.
+ [{wesanderson}](https://github.com/karthik/wesanderson) - Color palettes based on various Wes Anderson films (e.g., The Grand Budapest Hotel).
+ [{ochRe}](https://github.com/hollylkirk/ochRe) - Color palettes "inspired by Australian art, landscapes, and wildlife."
+ [{paletteer}](https://github.com/EmilHvitfeldt/paletteer) offers a vast selection of various color palettes.

Check out the interactive color picker [here](https://emilhvitfeldt.github.io/r-color-palettes/)


### Shapes {#shape1}
```{r}
#| echo: false
#| out-height: 50%
#| out-width: 50%
#| fig-align: "center"
shp_df <- data.frame(shp = factor(1:25), x = rep(1:5,each=5), y = rep(1:5,5))
ggplot(shp_df,aes(x,y)) +
  geom_point(shape=shp_df$shp, size = 7, fill = "dodgerblue") +
  geom_text(aes(label=shp,x = x-.2), size = 6) +
  theme_void(base_size=15)+
  scale_y_reverse() +
  theme(plot.margin = unit(c(2,2,2,2),"lines"))
```

[**Zusätzlicher Überblick**](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/)

### Linetypes {#line}
```{r}
#| echo: false
#| out-height: 30%
#| out-width: 50%
#| fig-align: "center"
lt_df <- data.frame(x = 0, y = seq(0,.75,.125),
                    lty = 0:6,
                     lt = c("0 'blank'"   ,"1 'solid'"   ,"2 'dashed'"  ,"3 'dotted'"  ,"4 'dotdash'" ,"5 'longdash'",  "6 'twodash'" )  )
ggplot(lt_df, aes(x,y,linetype = factor(lty))) + 
  geom_segment(aes(xend = 1,yend = y), size = 1) +
  geom_text(aes(x=-.35,label = lt),hjust= 0, size = 6) +
  theme_void(base_size=12)+
  guides(linetype = F) +
  scale_y_reverse()

```


::: callout-note
# Overview

Shapes und Linetypes at a glance in the [R Cookbook](http://www.cookbook-r.com/Graphs/Shapes_and_line_types/)

:::

## Useful links

+ The [Graphs chapter of the R Cookbook](www.cookbook-r.com/Graphs/) is an excellent resource for various options and a basic overview—for example, on adjusting the [legend](http://www.cookbook-r.com/Graphs/Legends_(ggplot2)), [line and point types](http://www.cookbook-r.com/Graphs/Shapes_and_line_types), or the [axes](http://www.cookbook-r.com/Graphs/Axes_(ggplot2)).

+ Adjusting font size and color: [This guide](https://cmdlinetips.com/2021/05/tips-to-customize-text-color-font-size-in-ggplot2-with-element_text/) provides a good overview of how to modify font size and color in `{ggplot2}`.

+ [From Data to Viz](https://www.data-to-viz.com/#explore) offers a decision tree for various relationships and descriptions with example syntax.

```{r,echo=FALSE}
#| out-width: 80%
#| out-height: 80%
knitr::include_graphics("./pic/104_decision.png")
```

+ The [R Graph Gallery](https://r-graph-gallery.com/) is even more extensive and offers additional visualization ideas.

+ For those who want to learn more about effective (and beautiful) data visualizations with `{ggplot2}`, [Cédric Scherer’s tutorial](https://cedricscherer.netlify.app/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/) is an excellent introduction. [This workshop](https://github.com/z3tt/beyond-bar-and-box-plots/blob/main/README.md#talk-resources) is great for further exploration.

+ [This workshop](https://rstudio-conf-2022.github.io/ggplot2-graphic-design/) offers additional insights on how to make data visualizations more appealing with `{ggplot2}`.

+ [A list of extensions for ggplot2](https://albert-rapp.de/posts/ggplot2-tips/12_a_few_gg_packages/12_a_few_gg_packages.html).

+ [**The** book on {ggplot2}](https://ggplot2-book.org/index.html).