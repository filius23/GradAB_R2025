{
  "hash": "7d4bdc1a99a42950ba4810584ce0fc5f",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Wrangling I: Creating Variables {#wrang1}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nTo keep it nice and simple, we'll use yet another university dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 <- data.frame(\n  studs = c(14954, 47269, 23659, 9415, 38079), \n  profs = c(250, 553, 438, 150, 636),\n  prom_recht = c(FALSE, TRUE, TRUE, TRUE, FALSE),\n  gegr  = c(1971, 1870, 1457, 1818, 1995),\n  uni = c(\"FH Aachen\", \"RWTH Aachen\", \"Uni Freiburg\", \"Uni Bonn\", \"FH Bonn-Rhein-Sieg\")\n)\n```\n:::\n\n\n\n\n## Creating Variables {#var}\n\nLet's take a closer look at creating variables in R. There are two basic ways to add variables to a `data.frame`:\n\n1. Base R: `...$newvar <-`   \n\n2. `{dplyr}`: `mutate(new_var= )`\n\n### Base R: `...$newvar <-`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$studs_to_mean <- dat3$studs - mean(dat3$studs)\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni studs_to_mean\n1 14954   250      FALSE 1971          FH Aachen      -11721.2\n2 47269   553       TRUE 1870        RWTH Aachen       20593.8\n3 23659   438       TRUE 1457       Uni Freiburg       -3016.2\n4  9415   150       TRUE 1818           Uni Bonn      -17260.2\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg       11403.8\n```\n\n\n:::\n:::\n\n\n\n\nYou can also delete variables using `<- NULL`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$studs_to_mean <- NULL\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni\n1 14954   250      FALSE 1971          FH Aachen\n2 47269   553       TRUE 1870        RWTH Aachen\n3 23659   438       TRUE 1457       Uni Freiburg\n4  9415   150       TRUE 1818           Uni Bonn\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\n### {dplyr}: `mutate(new_var= )`\n\nAn alternative way to create variables is using `mutate(new_variable = )` from `{dplyr}` (`{tidyverse}`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(studs_to_mean = studs - mean(studs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni studs_to_mean\n1 14954   250      FALSE 1971          FH Aachen      -11721.2\n2 47269   553       TRUE 1870        RWTH Aachen       20593.8\n3 23659   438       TRUE 1457       Uni Freiburg       -3016.2\n4  9415   150       TRUE 1818           Uni Bonn      -17260.2\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg       11403.8\n```\n\n\n:::\n:::\n\n\n\n\nYou can also create multiple variables within a single `mutate()` command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(\n  studs_to_mean = studs - mean(studs),\n  profs_to_mean = profs - mean(profs)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni studs_to_mean profs_to_mean\n1 14954   250      FALSE 1971          FH Aachen      -11721.2        -155.4\n2 47269   553       TRUE 1870        RWTH Aachen       20593.8         147.6\n3 23659   438       TRUE 1457       Uni Freiburg       -3016.2          32.6\n4  9415   150       TRUE 1818           Uni Bonn      -17260.2        -255.4\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg       11403.8         230.6\n```\n\n\n:::\n:::\n\n\n\n\nOr variables can be reused within `mutate()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(\n  rel_to_mean = studs - mean(studs),\n  above_mean = rel_to_mean > 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni rel_to_mean above_mean\n1 14954   250      FALSE 1971          FH Aachen    -11721.2      FALSE\n2 47269   553       TRUE 1870        RWTH Aachen     20593.8       TRUE\n3 23659   438       TRUE 1457       Uni Freiburg     -3016.2      FALSE\n4  9415   150       TRUE 1818           Uni Bonn    -17260.2      FALSE\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg     11403.8       TRUE\n```\n\n\n:::\n:::\n\n\n\n\nThe original dataset remains unchanged:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni\n1 14954   250      FALSE 1971          FH Aachen\n2 47269   553       TRUE 1870        RWTH Aachen\n3 23659   438       TRUE 1457       Uni Freiburg\n4  9415   150       TRUE 1818           Uni Bonn\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\nTo keep the results, store them in an object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat4 <- dat3 %>% mutate(\n  rel_to_mean = studs - mean(studs),\n  above_mean = rel_to_mean > 0\n)\n\ndat4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni rel_to_mean above_mean\n1 14954   250      FALSE 1971          FH Aachen    -11721.2      FALSE\n2 47269   553       TRUE 1870        RWTH Aachen     20593.8       TRUE\n3 23659   438       TRUE 1457       Uni Freiburg     -3016.2      FALSE\n4  9415   150       TRUE 1818           Uni Bonn    -17260.2      FALSE\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg     11403.8       TRUE\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Creating Dummy Variables with `as.numeric()`\n\nYou can convert logical variables into numeric dummy variables (0/1) using `as.numeric()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(\n  prom_dummy = as.numeric(prom_recht),\n  over10k = as.numeric(studs > 10000)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni prom_dummy over10k\n1 14954   250      FALSE 1971          FH Aachen          0       1\n2 47269   553       TRUE 1870        RWTH Aachen          1       1\n3 23659   438       TRUE 1457       Uni Freiburg          1       1\n4  9415   150       TRUE 1818           Uni Bonn          1       0\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg          0       1\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Grouping with `.by=` {#group_by}\n\nThe true power of `mutate()` becomes apparent when combined with other `{dplyr}` functions. A common task in data preparation involves grouped values.\n\nWe’ll make our example dataset a bit smaller:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 <- dat3 %>% \n  select(-uni,-gegr) # to ensure everything is visible\n```\n:::\n\n\n\n\nSince `{dplyr}` version 1.1.1, we can specify a grouping directly in `mutate()` using the `.by=` argument. This `.by=` grouping is applied only to the immediate calculations within `mutate()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  mutate(m_studs2 = mean(studs),\n         .by = prom_recht) %>% \n  mutate(m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht m_studs m_profs m_studs2 m_profs2\n1 14954   250      FALSE 26675.2   405.4  26516.5    405.4\n2 47269   553       TRUE 26675.2   405.4  26781.0    405.4\n3 23659   438       TRUE 26675.2   405.4  26781.0    405.4\n4  9415   150       TRUE 26675.2   405.4  26781.0    405.4\n5 38079   636      FALSE 26675.2   405.4  26516.5    405.4\n```\n\n\n:::\n:::\n\n\n\n\nUsing `summarise()` instead of `mutate()` provides an overview:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  summarise(m_studs = mean(studs),.by = prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht m_studs\n1      FALSE 26516.5\n2       TRUE 26781.0\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## `group_by()`\n\nBefore `{dplyr}` 1.1.1, grouping a dataset relied on `group_by()`.\nAfter setting `group_by()` along the values of a variable, all subsequent `mutate()` calculations are performed only within those groups:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  group_by(prom_recht) %>%\n  mutate(m_studs2 = mean(studs),\n         m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n# Groups:   prom_recht [2]\n  studs profs prom_recht m_studs m_profs m_studs2 m_profs2\n  <dbl> <dbl> <lgl>        <dbl>   <dbl>    <dbl>    <dbl>\n1 14954   250 FALSE       26675.    405.   26516.     443 \n2 47269   553 TRUE        26675.    405.   26781      380.\n3 23659   438 TRUE        26675.    405.   26781      380.\n4  9415   150 TRUE        26675.    405.   26781      380.\n5 38079   636 FALSE       26675.    405.   26516.     443 \n```\n\n\n:::\n:::\n\n\n\n\nAfter using `group_by()`, it's good practice to remove the grouping with `ungroup()` once it's no longer needed:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  group_by(prom_recht) %>%\n  mutate(m_studs2 = mean(studs)) %>% \n  ungroup() %>% \n  mutate(m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  studs profs prom_recht m_studs m_profs m_studs2 m_profs2\n  <dbl> <dbl> <lgl>        <dbl>   <dbl>    <dbl>    <dbl>\n1 14954   250 FALSE       26675.    405.   26516.     405.\n2 47269   553 TRUE        26675.    405.   26781      405.\n3 23659   438 TRUE        26675.    405.   26781      405.\n4  9415   150 TRUE        26675.    405.   26781      405.\n5 38079   636 FALSE       26675.    405.   26516.     405.\n```\n\n\n:::\n:::\n\n\n\n\n<!-- :heart: -->\n\n:::\n\n## `across()`: Processing Multiple Variables {#across}\n\nA highly versatile addition to `mutate()` and `summarise()` is `across()`. This allows us to apply a function to multiple columns simultaneously, without repeating code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(studs = mean(studs),\n            profs = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    studs profs\n1 26675.2 405.4\n```\n\n\n:::\n:::\n\n\n\n\nHere, `across()` offers a much shorter syntax for variable selection, and we can use [`?select_helpers`](02_intro.qmd#selecthelpers) like `matches()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(.cols = matches(\"studs|profs\"),.fns = ~mean(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    studs profs\n1 26675.2 405.4\n```\n\n\n:::\n:::\n\n\n\n\nThis is also compatible with `.by=`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), ~mean(.x)), .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht   studs    profs\n1      FALSE 26516.5 443.0000\n2       TRUE 26781.0 380.3333\n```\n\n\n:::\n:::\n\n\n\n\n[For more examples on how apply multiple functions, include renaming etc. see below](#across)\n\n### [Exercise](#mutsum_ue) {#ue06_2}\n\n## Custom Functions\n\nSo far, we only used functions written by others. We can also use own functions to avoid repetition:\n\nTo do so, let’s examine three satisfaction variables for respondents in rows 12-16:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"ujgevuiwjv\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#ujgevuiwjv table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ujgevuiwjv thead, #ujgevuiwjv tbody, #ujgevuiwjv tfoot, #ujgevuiwjv tr, #ujgevuiwjv td, #ujgevuiwjv th {\n  border-style: none;\n}\n\n#ujgevuiwjv p {\n  margin: 0;\n  padding: 0;\n}\n\n#ujgevuiwjv .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ujgevuiwjv .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ujgevuiwjv .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ujgevuiwjv .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ujgevuiwjv .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ujgevuiwjv .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ujgevuiwjv .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ujgevuiwjv .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ujgevuiwjv .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ujgevuiwjv .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ujgevuiwjv .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ujgevuiwjv .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ujgevuiwjv .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ujgevuiwjv .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ujgevuiwjv .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ujgevuiwjv .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ujgevuiwjv .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ujgevuiwjv .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ujgevuiwjv .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ujgevuiwjv .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ujgevuiwjv .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ujgevuiwjv .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ujgevuiwjv .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ujgevuiwjv .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ujgevuiwjv .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ujgevuiwjv .gt_left {\n  text-align: left;\n}\n\n#ujgevuiwjv .gt_center {\n  text-align: center;\n}\n\n#ujgevuiwjv .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ujgevuiwjv .gt_font_normal {\n  font-weight: normal;\n}\n\n#ujgevuiwjv .gt_font_bold {\n  font-weight: bold;\n}\n\n#ujgevuiwjv .gt_font_italic {\n  font-style: italic;\n}\n\n#ujgevuiwjv .gt_super {\n  font-size: 65%;\n}\n\n#ujgevuiwjv .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ujgevuiwjv .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ujgevuiwjv .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ujgevuiwjv .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ujgevuiwjv .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ujgevuiwjv .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ujgevuiwjv .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#ujgevuiwjv .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#ujgevuiwjv div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"variable\">variable</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Important-regarding-job\">Important regarding job</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><span data-qmd-base64=\"YFBFTzAzMDBhYA==\"><span class='gt_from_md'><code>PEO0300a</code></span></span></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> To earn a lot of money</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><span data-qmd-base64=\"YFBFTzAzMDBiYA==\"><span class='gt_from_md'><code>PEO0300b</code></span></span></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> A job, that is fun</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><span data-qmd-base64=\"YFBFTzAzMDBjYA==\"><span class='gt_from_md'><code>PEO0300c</code></span></span></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> Good career opportunities</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><span data-qmd-base64=\"YFBFTzAzMDBkYA==\"><span class='gt_from_md'><code>PEO0300d</code></span></span></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> Job security</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><span data-qmd-base64=\"YFBFTzAzMDBlYA==\"><span class='gt_from_md'><code>PEO0300e</code></span></span></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> Job where you can show off your abilities</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"sobbzfqfjd\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#sobbzfqfjd table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#sobbzfqfjd thead, #sobbzfqfjd tbody, #sobbzfqfjd tfoot, #sobbzfqfjd tr, #sobbzfqfjd td, #sobbzfqfjd th {\n  border-style: none;\n}\n\n#sobbzfqfjd p {\n  margin: 0;\n  padding: 0;\n}\n\n#sobbzfqfjd .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 11px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#sobbzfqfjd .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#sobbzfqfjd .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#sobbzfqfjd .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#sobbzfqfjd .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#sobbzfqfjd .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#sobbzfqfjd .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#sobbzfqfjd .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#sobbzfqfjd .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#sobbzfqfjd .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#sobbzfqfjd .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#sobbzfqfjd .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#sobbzfqfjd .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#sobbzfqfjd .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#sobbzfqfjd .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sobbzfqfjd .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#sobbzfqfjd .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#sobbzfqfjd .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#sobbzfqfjd .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sobbzfqfjd .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#sobbzfqfjd .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sobbzfqfjd .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#sobbzfqfjd .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sobbzfqfjd .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#sobbzfqfjd .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#sobbzfqfjd .gt_left {\n  text-align: left;\n}\n\n#sobbzfqfjd .gt_center {\n  text-align: center;\n}\n\n#sobbzfqfjd .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#sobbzfqfjd .gt_font_normal {\n  font-weight: normal;\n}\n\n#sobbzfqfjd .gt_font_bold {\n  font-weight: bold;\n}\n\n#sobbzfqfjd .gt_font_italic {\n  font-style: italic;\n}\n\n#sobbzfqfjd .gt_super {\n  font-size: 65%;\n}\n\n#sobbzfqfjd .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#sobbzfqfjd .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#sobbzfqfjd .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#sobbzfqfjd .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#sobbzfqfjd .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#sobbzfqfjd .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#sobbzfqfjd .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#sobbzfqfjd .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#sobbzfqfjd div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"a-10-bis--1\">-10 bis -1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"a1\">1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"a2\">2</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"a3\">3</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"a4\">4</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"-10 bis -1\" class=\"gt_row gt_left\">t.n.z./k.A.</td>\n<td headers=\"1\" class=\"gt_row gt_left\">Very important</td>\n<td headers=\"2\" class=\"gt_row gt_left\">Rather important</td>\n<td headers=\"3\" class=\"gt_row gt_left\">Rather not important</td>\n<td headers=\"4\" class=\"gt_row gt_left\">Not important at all</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npend <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n\nsat_small <- \n  pend %>% \n    filter(welle == 1) %>% \n    select(matches(\"PEO0300(a|b|c)\")) %>% \n    slice(12:16) %>% \n    haven::zap_labels() %>% haven::zap_label() # remove labels\nsat_small\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  PEO0300a PEO0300b PEO0300c\n     <dbl>    <dbl>    <dbl>\n1        2        3        2\n2        1        1        3\n3        1        1        3\n4        2        1        1\n5        1        1        2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small <- sat_small %>% mutate(across(everything(),~as.numeric(.x)))\n```\n:::\n\n\n\n\nSometimes we want to process multiple variables in the same way. Above, we saw how to handle this with [`across()`](#across) for existing functions. But what if we want to perform a calculation that isn't as simple as applying `mean()`, `sd()`, etc.?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% \n  mutate(dmean_PEO0300a = PEO0300a - mean(PEO0300a,na.rm = T),\n         dmean_PEO0300c = PEO0300c - mean(PEO0300c,na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  PEO0300a PEO0300b PEO0300c dmean_PEO0300a dmean_PEO0300c\n     <dbl>    <dbl>    <dbl>          <dbl>          <dbl>\n1        2        3        2            0.6         -0.200\n2        1        1        3           -0.4          0.8  \n3        1        1        3           -0.4          0.8  \n4        2        1        1            0.6         -1.2  \n5        1        1        2           -0.4         -0.200\n```\n\n\n:::\n:::\n\n\n\n\n...and now what about `F1450_06`? Typing this out three times would violate the \"DRY\" principle[^dry], especially considering the PASS CampusFile contains 5 columns of similar satisfaction variables. Copying and pasting is not a practical option.\n\n[^dry]: Do not repeat yourself, see [Wickham et al](https://r4ds.had.co.nz/functions.html): \"You should consider writing a function whenever you’ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).\"\n\nCustom functions allow us to adhere to the DRY principle in R. We'll make our calculation steps part of a `function()` and apply it to the desired variables. A function takes an input, defined as a placeholder within the `()`. This placeholder is used within the function, and we return the result with `return()`. Only one output can be returned:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtomean <- function(x){\n  d_x <- x - mean(x,na.rm = T)\n  return(d_x)\n}\n```\n:::\n\n\n\nHow can we now apply our function `dtomean()` to the variables from our `sat_small`?  \nIn principle, we saw [at the beginning](#02_intro) that a `data.frame` is simply a combined collection of vectors (the variables).  \nAccordingly, we can now apply our `dtomean()` to a variable (a vector) by calling it with `data.frame$variablename`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtomean(sat_small$PEO0300a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.6 -0.4 -0.4  0.6 -0.4\n```\n\n\n:::\n:::\n\n\n\n\nTo apply our function to each variable of a `data.frame`, we can use `lapply()` - the output will then be a list, with elements named after the variable names:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(sat_small,FUN = dtomean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$PEO0300a\n[1]  0.6 -0.4 -0.4  0.6 -0.4\n\n$PEO0300b\n[1]  1.6 -0.4 -0.4 -0.4 -0.4\n\n$PEO0300c\n[1] -0.2  0.8  0.8 -1.2 -0.2\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- lapply(sat_small,FUN = dtomean)\nclass(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n\n`map()` from `{purrr}` is an alternative to `lapply`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% map(~dtomean(.x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$PEO0300a\n[1]  0.6 -0.4 -0.4  0.6 -0.4\n\n$PEO0300b\n[1]  1.6 -0.4 -0.4 -0.4 -0.4\n\n$PEO0300c\n[1] -0.2  0.8  0.8 -1.2 -0.2\n```\n\n\n:::\n:::\n\n\n\nThis *formula syntax* can also be found in `across()` - additionally, with `.names =` we have the option to modify the variable names for the results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% \n  mutate(across(matches(\"PEO0300\"),~dtomean(.x)) )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  PEO0300a PEO0300b PEO0300c\n     <dbl>    <dbl>    <dbl>\n1      0.6      1.6   -0.200\n2     -0.4     -0.4    0.8  \n3     -0.4     -0.4    0.8  \n4      0.6     -0.4   -1.2  \n5     -0.4     -0.4   -0.200\n```\n\n\n:::\n:::\n\n\n\n\n\n### [Exercise](#fnct) {#ue06_4}\n\n\n## Exercises\n\n### Exercise {#mutsum_ue}\n\n<!-- + Continue using the university dataset `dat3` as [shown above](#wrang1). -->\n<!-- + Calculate the student-to-professor ratio (students per professor `studs/profs`) at the universities relative to the mean of the ratio (`rel_studprofs`). -->\n<!-- + Calculate the student-to-professor ratio (`studprofs`) relative to the mean separately for universities with and without the right to award doctorates (`prom_recht`), and add this as a new column. -->\n\n\n\n+ Use the `pend_small` dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                               col_select = c(\"welle\",\"zpsex\",\"PEO0400a\",\"PEO0400b\",\"PEO0400c\",\"PEO0400d\")\n                               ) %>% \n  haven::zap_labels() %>% # drop labels to have a clean data.frame\n  filter(welle == 2) %>% \n  slice(1:10)\n```\n:::\n\n\n\n\n\n+ Calculate the mean for the variables PEO0400a by gender (`zpsex`):\n+ Calculate the mean for the variables `PEO0400a`, `PEO0400b`, `PEO0400c`, and `PEO0400d` by gender (`zpsex`):\n+ Use `across()` to calculate the means for all four variables.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"vtjrgsnfjj\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#vtjrgsnfjj table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#vtjrgsnfjj thead, #vtjrgsnfjj tbody, #vtjrgsnfjj tfoot, #vtjrgsnfjj tr, #vtjrgsnfjj td, #vtjrgsnfjj th {\n  border-style: none;\n}\n\n#vtjrgsnfjj p {\n  margin: 0;\n  padding: 0;\n}\n\n#vtjrgsnfjj .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#vtjrgsnfjj .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#vtjrgsnfjj .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#vtjrgsnfjj .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#vtjrgsnfjj .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#vtjrgsnfjj .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#vtjrgsnfjj .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#vtjrgsnfjj .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#vtjrgsnfjj .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#vtjrgsnfjj .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#vtjrgsnfjj .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#vtjrgsnfjj .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#vtjrgsnfjj .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#vtjrgsnfjj .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#vtjrgsnfjj .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vtjrgsnfjj .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#vtjrgsnfjj .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#vtjrgsnfjj .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#vtjrgsnfjj .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vtjrgsnfjj .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#vtjrgsnfjj .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vtjrgsnfjj .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#vtjrgsnfjj .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vtjrgsnfjj .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#vtjrgsnfjj .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#vtjrgsnfjj .gt_left {\n  text-align: left;\n}\n\n#vtjrgsnfjj .gt_center {\n  text-align: center;\n}\n\n#vtjrgsnfjj .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#vtjrgsnfjj .gt_font_normal {\n  font-weight: normal;\n}\n\n#vtjrgsnfjj .gt_font_bold {\n  font-weight: bold;\n}\n\n#vtjrgsnfjj .gt_font_italic {\n  font-style: italic;\n}\n\n#vtjrgsnfjj .gt_super {\n  font-size: 65%;\n}\n\n#vtjrgsnfjj .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#vtjrgsnfjj .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#vtjrgsnfjj .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#vtjrgsnfjj .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#vtjrgsnfjj .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#vtjrgsnfjj .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#vtjrgsnfjj .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#vtjrgsnfjj .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#vtjrgsnfjj div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"var\">var</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"lab\">lab</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><span data-qmd-base64=\"YFBFTzA0MDBhYA==\"><span class='gt_from_md'><code>PEO0400a</code></span></span></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: Woman should be willing to reduce her working hours for family</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><span data-qmd-base64=\"YFBFTzA0MDBiYA==\"><span class='gt_from_md'><code>PEO0400b</code></span></span></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: What women really want is a home and children</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><span data-qmd-base64=\"YFBFTzA0MDBjYA==\"><span class='gt_from_md'><code>PEO0400c</code></span></span></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: Working mother can have an equally warm relationship with her childr</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><span data-qmd-base64=\"YFBFTzA0MDBkYA==\"><span class='gt_from_md'><code>PEO0400d</code></span></span></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: Responsibility of husband: To earn money; responsibility of wife: Ho</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   welle zpsex PEO0400a PEO0400b PEO0400c PEO0400d\n1      2     2        1        1        4        1\n2      2     1        2        1        3        2\n3      2     2        1        3        1        4\n4      2     2        1        1        4        1\n5      2     2        1        1        1        1\n6      2     1        1        1        1        1\n7      2     1        1        2        1        4\n8      2     1        3        2        3        2\n9      2     2        3        3        3        3\n10     2     1        2        3        2        2\n```\n\n\n:::\n:::\n\n\n\n\n+ Standardize the variables `PEO0400a` - `PEO0400d` from `pend_small` using the following pattern:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small %>% \n  mutate(std_PEO0400b = (PEO0400b - mean(PEO0400b,na.rm = T))/sd(PEO0400b,na.rm = T))\n```\n:::\n\n\n\n+ Use a function so that you don't have to repeatedly enter the same steps.\n+ Additionally, use `across()` to apply the function to the desired variables.\n+ Calculate the standardization separately by gender (`zpsex`) using `.by =`.\n\n\n[Back to top](#ue06_2)\n\n[Back to top](#ue06_3)\n\n\n### Exercise {#fnct}\n\nContinue using `pend_small`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   welle zpsex PEO0400a PEO0400b PEO0400c PEO0400d\n1      2     2        1        1        4        1\n2      2     1        2        1        3        2\n3      2     2        1        3        1        4\n4      2     2        1        1        4        1\n5      2     2        1        1        1        1\n6      2     1        1        1        1        1\n7      2     1        1        2        1        4\n8      2     1        3        2        3        2\n9      2     2        3        3        3        3\n10     2     1        2        3        2        2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n+ Standardize the variables `PEO0400a` - `PEO0400d` from `pend_small` using the following pattern:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small %>% \n  mutate(std_PEO0400b = (PEO0400b - mean(PEO0400b,na.rm = T))/sd(PEO0400b,na.rm = T))\n```\n:::\n\n\n\n+ Use a function so that you don't have to repeatedly enter the same steps.\n+ Additionally, use `across()` to apply the function to the desired variables.\n\n[Back to top](#ue06_4)\n\n\n## Appendix\n\n### `across()`: Processing Multiple Variables {#across}\n\nA highly versatile addition to `mutate()` and `summarise()` is `across()`. This allows us to apply a function to multiple columns simultaneously, without repeating code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(studs = mean(studs),\n            profs = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    studs profs\n1 26675.2 405.4\n```\n\n\n:::\n:::\n\n\n\n\nHere, `across()` offers a much shorter syntax for variable selection, and we can use [`?select_helpers`](02_intro.qmd#selecthelpers) like `matches()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(.cols = matches(\"studs|profs\"),.fns = ~mean(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    studs profs\n1 26675.2 405.4\n```\n\n\n:::\n:::\n\n\n\n\nThis is also compatible with `.by=`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), ~mean(.x)), .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht   studs    profs\n1      FALSE 26516.5 443.0000\n2       TRUE 26781.0 380.3333\n```\n\n\n:::\n:::\n\n\n\n\nWe can apply multiple functions by placing them in a `list()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), list(mean = ~mean(.x), sd = ~sd(.x))), .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht studs_mean studs_sd profs_mean profs_sd\n1      FALSE    26516.5 16351.84   443.0000 272.9432\n2       TRUE    26781.0 19119.14   380.3333 207.5966\n```\n\n\n:::\n:::\n\n\n\n\nYou can define this `list()` in advance and use it later:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwert_liste <- list(MEAN = ~mean(.x), SD = ~sd(.x))\n\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), wert_liste), .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht studs_MEAN studs_SD profs_MEAN profs_SD\n1      FALSE    26516.5 16351.84   443.0000 272.9432\n2       TRUE    26781.0 19119.14   380.3333 207.5966\n```\n\n\n:::\n:::\n\n\n\n\nThe `.names()` argument allows us to control the naming of columns. `{.fn}` stands for the function being applied, and `{.col}` represents the name of the variable being processed.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), \n                   wert_liste,\n                   .names = \"{.fn}_{.col}\"),\n            .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht MEAN_studs SD_studs MEAN_profs SD_profs\n1      FALSE    26516.5 16351.84   443.0000 272.9432\n2       TRUE    26781.0 19119.14   380.3333 207.5966\n```\n\n\n:::\n:::\n\n\n\n\nAll these functions also work with `mutate()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  mutate(across(matches(\"studs|profs\"),\n                wert_liste, \n                .names = \"{.col}XX{.fn}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni studsXXMEAN studsXXSD\n1 14954   250      FALSE 1971          FH Aachen     26675.2  15799.92\n2 47269   553       TRUE 1870        RWTH Aachen     26675.2  15799.92\n3 23659   438       TRUE 1457       Uni Freiburg     26675.2  15799.92\n4  9415   150       TRUE 1818           Uni Bonn     26675.2  15799.92\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg     26675.2  15799.92\n  profsXXMEAN profsXXSD\n1       405.4   203.349\n2       405.4   203.349\n3       405.4   203.349\n4       405.4   203.349\n5       405.4   203.349\n```\n\n\n:::\n:::\n\n\n\n\n[More examples in the across() documentation](https://dplyr.tidyverse.org/reference/across.html)\n\n#### [Exercise](#across_ue) {#ue06_3}\n\n\n### Helper functions \n#### `ifelse()` {#ifelse}\n`ifelse()` is a great help for all recoding tasks: we formulate a condition and if it is met, the first value is used; if not, the second value is used. Here we check whether `studs-mean(studs)` is greater than `0` - if so, `above` is used, otherwise `below`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(rel_to_mean = studs-mean(studs),\n                ab_mean_lab = ifelse(rel_to_mean > 0,\"above\",\"below\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni rel_to_mean ab_mean_lab\n1 14954   250      FALSE 1971          FH Aachen    -11721.2       below\n2 47269   553       TRUE 1870        RWTH Aachen     20593.8       above\n3 23659   438       TRUE 1457       Uni Freiburg     -3016.2       below\n4  9415   150       TRUE 1818           Uni Bonn    -17260.2       below\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg     11403.8       above\n```\n\n\n:::\n:::\n\n\n\n\nThis can be helpful to replace negative values with `NA`, for example in the PASS data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small2 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                               col_select = c(\"palter\",\"PEO0400a\",\"PEO0400b\",\"PEO0400c\",\"statakt\"))  %>% \n  slice(5624:5640)\n```\n:::\n\n\n\n\nThe basic idea is to use `ifelse()` to replace negative values in a variable with `NA`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small2 %>% mutate(PEO0400a = ifelse(PEO0400a<0,NA,PEO0400a))\n```\n:::\n\n\n\n\n`across()` allows us to apply this `ifelse()`-function to replace `NA` in `PEO0400a`,`PEO0400b`, `PEO0400c` and `statakt`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small2 %>% mutate(across(c(\"PEO0400a\",\"PEO0400b\",\"PEO0400c\",\"statakt\"), ~ifelse(.x<0,NA,.x)))  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 × 5\n   palter    PEO0400a PEO0400b PEO0400c statakt\n   <dbl+lbl>    <dbl>    <dbl>    <dbl>   <dbl>\n 1 77               1        3        3      NA\n 2 78              NA       NA       NA      NA\n 3 51               2        4        1      NA\n 4 23               3        3        2      NA\n 5 17               3        2        1      NA\n 6 47               3        2        2      NA\n 7 24               3        4        1       1\n 8 52               2        3        1       1\n 9 19               2        3        2       3\n10 48               2        3        1       1\n11 49              NA       NA       NA      NA\n12 47               2        3        1      NA\n13 48               2        3        1       1\n14 49              NA       NA       NA       1\n15 39               4        3        1      NA\n16 37               3        4        1      NA\n17 38               3        3        1       1\n```\n\n\n:::\n\n```{.r .cell-code}\npend_small2 %>% mutate(across(matches(\"PEO0400|statakt\"), ~ifelse(.x<0,NA,.x)))  # even shorter: matches()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 × 5\n   palter    PEO0400a PEO0400b PEO0400c statakt\n   <dbl+lbl>    <dbl>    <dbl>    <dbl>   <dbl>\n 1 77               1        3        3      NA\n 2 78              NA       NA       NA      NA\n 3 51               2        4        1      NA\n 4 23               3        3        2      NA\n 5 17               3        2        1      NA\n 6 47               3        2        2      NA\n 7 24               3        4        1       1\n 8 52               2        3        1       1\n 9 19               2        3        2       3\n10 48               2        3        1       1\n11 49              NA       NA       NA      NA\n12 47               2        3        1      NA\n13 48               2        3        1       1\n14 49              NA       NA       NA       1\n15 39               4        3        1      NA\n16 37               3        4        1      NA\n17 38               3        3        1       1\n```\n\n\n:::\n:::\n\n\n\n\n\n#### `case_when()`\n`case_when()` (`{dplyr}`) extends the principle `ifelse()`, allowing us to specify more than two options.  \nThe syntax is slightly different: first, we specify the condition, then after a `~` the values to be used: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(age = case_when(gegr < 1500 ~ \"very old\",\n                                gegr < 1900 ~ \"old\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni      age\n1 14954   250      FALSE 1971          FH Aachen     <NA>\n2 47269   553       TRUE 1870        RWTH Aachen      old\n3 23659   438       TRUE 1457       Uni Freiburg very old\n4  9415   150       TRUE 1818           Uni Bonn      old\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg     <NA>\n```\n\n\n:::\n:::\n\n\n\n\nWith `TRUE`, we can address all cases that have not met any conditions so far:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(age = case_when(gegr < 1500 ~ \"very old\",\n                                gegr < 1900 ~ \"old\",\n                                TRUE ~ \"relatively new\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni            age\n1 14954   250      FALSE 1971          FH Aachen relatively new\n2 47269   553       TRUE 1870        RWTH Aachen            old\n3 23659   438       TRUE 1457       Uni Freiburg       very old\n4  9415   150       TRUE 1818           Uni Bonn            old\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg relatively new\n```\n\n\n:::\n:::\n\n\n\n\nThis doesn't have to be limited to one variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(age = case_when(gegr < 1500 & prom_recht  == T ~ \"very old university\",\n                                gegr < 1900 & prom_recht  == T ~ \"old university\",\n                                gegr > 1900 & prom_recht  == T ~ \"young university\",\n                                gegr < 1900 & prom_recht  == F ~ \"old college\",\n                                gegr > 1900 & prom_recht  == F ~ \"young college\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni                 age\n1 14954   250      FALSE 1971          FH Aachen       young college\n2 47269   553       TRUE 1870        RWTH Aachen      old university\n3 23659   438       TRUE 1457       Uni Freiburg very old university\n4  9415   150       TRUE 1818           Uni Bonn      old university\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg       young college\n```\n\n\n:::\n:::\n\n\n\n\n\n#### `cut()`: creating classes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni\n1 14954   250      FALSE 1971          FH Aachen\n2 47269   553       TRUE 1870        RWTH Aachen\n3 23659   438       TRUE 1457       Uni Freiburg\n4  9415   150       TRUE 1818           Uni Bonn\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\nA common task in data preparation is classifying a continuous variable, such as the number of professors. We want to group `profs` in steps of 150. To create these classes, we use `cut()` and specify the class boundaries with `breaks`. We can use `seq()` to generate the breakpoints. In `seq()`, we specify the lower and upper limits along with the step size.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut(dat3$profs,breaks = c(50, 200, 350, 500, 650))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] (200,350] (500,650] (350,500] (50,200]  (500,650]\nLevels: (50,200] (200,350] (350,500] (500,650]\n```\n\n\n:::\n\n```{.r .cell-code}\ncut(dat3$profs,breaks = seq(50,650,150))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] (200,350] (500,650] (350,500] (50,200]  (500,650]\nLevels: (50,200] (200,350] (350,500] (500,650]\n```\n\n\n:::\n:::\n\n\n\n\nWe store these values in a new variable in the `dat3` dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$prof_class <- cut(dat3$profs,breaks = seq(50,650,150))\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni prof_class\n1 14954   250      FALSE 1971          FH Aachen  (200,350]\n2 47269   553       TRUE 1870        RWTH Aachen  (500,650]\n3 23659   438       TRUE 1457       Uni Freiburg  (350,500]\n4  9415   150       TRUE 1818           Uni Bonn   (50,200]\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg  (500,650]\n```\n\n\n:::\n:::\n\n\n\n\nFor this new variable, we can request a frequency table using `count()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% count(prof_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prof_class n\n1   (50,200] 1\n2  (200,350] 1\n3  (350,500] 1\n4  (500,650] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nThe parentheses `(` indicate exclusion, while the brackets `]` indicate inclusion. There are 1 universities in the dataset that have more than 200 and up to 350 professors.\n\nFor the following examples, we delete the `prof_class` variable again:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$prof_class <- NULL\n```\n:::\n\n\n\n\n**Some useful options for `cut()` in the appendix**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp <- c(1990,1998,2001,2009)\nbsp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1990 1998 2001 2009\n```\n\n\n:::\n\n```{.r .cell-code}\ncut(bsp,breaks = c(1990,2000,2010)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] <NA>             (1.99e+03,2e+03] (2e+03,2.01e+03] (2e+03,2.01e+03]\nLevels: (1.99e+03,2e+03] (2e+03,2.01e+03]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Specify the number of digits in the labels\ncut(bsp,breaks = c(1990,2000,2010),dig.lab = 4) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] <NA>        (1990,2000] (2000,2010] (2000,2010]\nLevels: (1990,2000] (2000,2010]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Include the lower boundary\ncut(bsp,breaks = c(1990,2000,2010),dig.lab = 4,include.lowest = T) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] [1990,2000] [1990,2000] (2000,2010] (2000,2010]\nLevels: [1990,2000] (2000,2010]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Number the categories instead of labels:\ncut(bsp,breaks = c(1990,2000,2010),labels = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA  1  2  2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Specify your own labels:\ncut(bsp,breaks = c(1990,2000,2010),labels = c(\"90s\",\"00s\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] <NA> 90s  00s  00s \nLevels: 90s 00s\n```\n\n\n:::\n:::\n\n\n\n\n### Renaming variables\n\n\nTo rename variables, use `rename(new_name = old_name)`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% rename(newname = PEO0300a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  newname PEO0300b PEO0300c\n    <dbl>    <dbl>    <dbl>\n1       2        3        2\n2       1        1        3\n3       1        1        3\n4       2        1        1\n5       1        1        2\n```\n\n\n:::\n:::\n\n\n\n\nFor advanced transformations, it's worth looking into `rename_with()`. This allows us to use [Regular Expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf), for example from [{stringr}](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf). Here’s just an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% rename_with(~tolower(.))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  peo0300a peo0300b peo0300c\n     <dbl>    <dbl>    <dbl>\n1        2        3        2\n2        1        1        3\n3        1        1        3\n4        2        1        1\n5        1        1        2\n```\n\n\n:::\n\n```{.r .cell-code}\nsat_small %>% rename_with(~str_remove(.x,\"PEO0300\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n      a     b     c\n  <dbl> <dbl> <dbl>\n1     2     3     2\n2     1     1     3\n3     1     1     3\n4     2     1     1\n5     1     1     2\n```\n\n\n:::\n\n```{.r .cell-code}\nsat_small %>% rename_with(~str_replace(.x,\"PEO0300\",\"Occupation_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  Occupation_a Occupation_b Occupation_c\n         <dbl>        <dbl>        <dbl>\n1            2            3            2\n2            1            1            3\n3            1            1            3\n4            2            1            1\n5            1            1            2\n```\n\n\n:::\n:::\n\n\n\n### String Functions for *regex*\n\n[{stringr}](https://stringr.tidyverse.org/) provides a series of very useful string functions with [regular expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf). You can get an overview from this [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(uni_fh = str_detect(uni,\"Uni\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni uni_fh\n1 14954   250      FALSE 1971          FH Aachen  FALSE\n2 47269   553       TRUE 1870        RWTH Aachen  FALSE\n3 23659   438       TRUE 1457       Uni Freiburg   TRUE\n4  9415   150       TRUE 1818           Uni Bonn   TRUE\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg  FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ndat3 %>% mutate(bula = case_when(str_detect(uni,\"Bremen\")~ \"HB\",\n                                 str_detect(uni,\"Oldenb|Vechta\")~ \"NDS\",\n                                 str_detect(uni,\"Bonn|Aachen\")~ \"NRW\",\n                                 str_detect(uni,\"Freiburg\")~ \"BW\"\n                                 ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni bula\n1 14954   250      FALSE 1971          FH Aachen  NRW\n2 47269   553       TRUE 1870        RWTH Aachen  NRW\n3 23659   438       TRUE 1457       Uni Freiburg   BW\n4  9415   150       TRUE 1818           Uni Bonn  NRW\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg  NRW\n```\n\n\n:::\n\n```{.r .cell-code}\ndat3 %>% mutate(ort = str_remove(uni,\"Uni |FH |RWTH \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni             ort\n1 14954   250      FALSE 1971          FH Aachen          Aachen\n2 47269   553       TRUE 1870        RWTH Aachen          Aachen\n3 23659   438       TRUE 1457       Uni Freiburg        Freiburg\n4  9415   150       TRUE 1818           Uni Bonn            Bonn\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg Bonn-Rhein-Sieg\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}