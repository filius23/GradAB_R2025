{
  "hash": "94895d536e6cc6bf42441b3195460be8",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Wrangling II: Merging & reshaping {#wrang3}\n\n\n\n\n\n\n\n\n\n## Joining/merging data sets {#join}\n\nA mutating join allows you to combine variables from two data.frames. It first matches observations by their keys, then copies across variables from one table to the other.\\\n[R for Data Science: Mutating joins](http://r4ds.had.co.nz/relational-data.html#mutating-joins)\n\nA quick illustration:[^05_merge_pivot-1]\n\n[^05_merge_pivot-1]: Using [tidyexplain](https://github.com/gadenbuie/tidyexplain)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05_merge_pivot_files/figure-html/intial-dfs-1.png){fig-align='center' width=40%}\n:::\n:::\n\n\n\n\n<!-- <img src=\"pic/static/png/original-dfs.png\" width=\"480px\" /> -->\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {#fig-elephants layout-ncol=3}\n![inner_join](pic/inner-join.gif){width=200} \n\n![left_join](pic/left-join-extra.gif){width=200} \n\n![full_join](pic/full-join.gif){width=200}\n\n<!-- join variants -->\n:::\n\n<!-- ![](pic/anti-join.gif) -->\n\n<!-- ![](pic/right-join.gif) -->\n\nThere are also [`right_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) and [`anti_join()`](https://dplyr.tidyverse.org/reference/filter-joins.html). For a more in-depth introduction, the chapter on [Relational Data](https://r4ds.had.co.nz/relational-data.html#relational-data) in [R for Data Science](https://r4ds.had.co.nz/) is highly recommended.\n\nA very helpful option in the `..._join()` functions is the ability to join different variables. For example, here we have some cases from `ids_df`, for which the (fictional) unemployment figures from `alo_bula` should be used. However, in `ids_df`, the variable `Bula` contains the state information, while in `alo_bula`, it is the variable `bundesland`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nids_df <-  data.frame(pnr = sample(1:9,4),\n                       Bula = c(2,1,14,15))\n\nset.seed(90459)\nalo_bula <- data.frame(bundesland = seq(1:8),\n                       Werte = sample(letters,size = 8) # mit sample() kann eine zufällige Auswahl getroffen werden \n                       )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nids_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   pnr Bula\n#> 1   8    2\n#> 2   3    1\n#> 3   2   14\n#> 4   6   15\n```\n\n\n:::\n\n```{.r .cell-code}\nalo_bula\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   bundesland Werte\n#> 1          1     g\n#> 2          2     m\n#> 3          3     n\n#> 4          4     z\n#> 5          5     w\n#> 6          6     r\n#> 7          7     t\n#> 8          8     h\n```\n\n\n:::\n\n```{.r .cell-code}\nids_df %>% left_join(alo_bula,by = c(\"Bula\"=\"bundesland\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   pnr Bula Werte\n#> 1   8    2     m\n#> 2   3    1     g\n#> 3   2   14  <NA>\n#> 4   6   15  <NA>\n```\n\n\n:::\n:::\n\n\n\n\nA quick check for the matching cases can be done using:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(ids_df$Bula %in% alo_bula$bundesland)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> \n#> FALSE  TRUE \n#>     2     2\n```\n\n\n:::\n:::\n\n\n\n\n`anti_join()` allows for checking which key variables are not present in the other data.frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nids_df %>% anti_join(alo_bula,by = c(\"Bula\"=\"bundesland\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   pnr Bula\n#> 1   2   14\n#> 2   6   15\n```\n\n\n:::\n\n```{.r .cell-code}\nalo_bula %>% anti_join(ids_df,by = c(\"bundesland\"=\"Bula\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   bundesland Werte\n#> 1          3     n\n#> 2          4     z\n#> 3          5     w\n#> 4          6     r\n#> 5          7     t\n#> 6          8     h\n```\n\n\n:::\n:::\n\n\n\n\n### [Exercise](#join_ue) {#uejoin}\n\n## Reshaping Data: `pivot_longer()` & `pivot_wider()`\n\n### Wide to Long\n\nReshaping data from wide to long format is useful when you want to store multiple observations per row. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df <- data.frame(bula = c(\"NRW\", \"NDS\"), alo2018 = c(2, 2), alo2017 = c(1, 1))\nbsp_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   bula alo2018 alo2017\n#> 1  NRW       2       1\n#> 2  NDS       2       1\n```\n\n\n:::\n:::\n\n\n\n\nWe can use `pivot_longer()` to convert this wide format to long:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df %>% pivot_longer(cols = c(alo2018, alo2017), names_to = \"year\", values_to = \"alo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 4 × 3\n#>   bula  year      alo\n#>   <chr> <chr>   <dbl>\n#> 1 NRW   alo2018     2\n#> 2 NRW   alo2017     1\n#> 3 NDS   alo2018     2\n#> 4 NDS   alo2017     1\n```\n\n\n:::\n:::\n\n\n\n\nTo remove a prefix from the column names:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df %>% pivot_longer(cols = c(alo2018, alo2017), names_to = \"year\", values_to = \"alo\", names_prefix = \"alo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 4 × 3\n#>   bula  year    alo\n#>   <chr> <chr> <dbl>\n#> 1 NRW   2018      2\n#> 2 NRW   2017      1\n#> 3 NDS   2018      2\n#> 4 NDS   2017      1\n```\n\n\n:::\n:::\n\n\n\n\n### Long to Wide\n\nTo convert from long format back to wide:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df2 <- data.frame(land = c(\"NRW\", \"NDS\", \"NRW\", \"NDS\"), alo = c(2.1, 1.8, 2.4, 2.2), alter = c(\"age_1825\", \"age_1825\", \"age_2630\", \"age_2630\"))\nbsp_df2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   land alo    alter\n#> 1  NRW 2.1 age_1825\n#> 2  NDS 1.8 age_1825\n#> 3  NRW 2.4 age_2630\n#> 4  NDS 2.2 age_2630\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp_df2 %>% pivot_wider(names_from = alter, values_from = alo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 2 × 3\n#>   land  age_1825 age_2630\n#>   <chr>    <dbl>    <dbl>\n#> 1 NRW        2.1      2.4\n#> 2 NDS        1.8      2.2\n```\n\n\n:::\n:::\n\n\n\n\n### [Exercise](#pivot_ue) {#uepivot}\n\n\n\n\n\n\n\n\n\n\n\n## Exercises\n\n### Exercise 1: Joining {#join_ue}\n\nJoin the selected observations from `PENDDAT_cf_W13.dta` with the household data to include the `region` where the respondents live, using `hnr` and `welle` as keys.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue11 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\", col_select = c(\"pnr\", \"welle\")) %>% slice(1:10)\n\nhh_dat <- haven::read_dta(\"./orig/HHENDDAT_cf_W13.dta\", col_select = c(\"hnr\", \"welle\", \"region\"))\n\npend_ue11 %>% left_join(hh_dat, by = c(\"welle\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 18,466 × 4\n#>           pnr welle                       hnr region   \n#>         <dbl> <dbl+lbl>                 <dbl> <dbl+lbl>\n#>  1 1000001901 1 [Wave 1 (2006/2007)] 10000019 4 [West] \n#>  2 1000001901 1 [Wave 1 (2006/2007)] 10000020 4 [West] \n#>  3 1000001901 1 [Wave 1 (2006/2007)] 10000023 4 [West] \n#>  4 1000001901 1 [Wave 1 (2006/2007)] 10000026 4 [West] \n#>  5 1000001901 1 [Wave 1 (2006/2007)] 10000031 4 [West] \n#>  6 1000001901 1 [Wave 1 (2006/2007)] 10000032 4 [West] \n#>  7 1000001901 1 [Wave 1 (2006/2007)] 10000035 4 [West] \n#>  8 1000001901 1 [Wave 1 (2006/2007)] 10000040 4 [West] \n#>  9 1000001901 1 [Wave 1 (2006/2007)] 10000043 4 [West] \n#> 10 1000001901 1 [Wave 1 (2006/2007)] 10000055 3 [Süd]  \n#> # ℹ 18,456 more rows\n```\n\n\n:::\n:::\n\n\n\n\n[Back to top](#uejoin)\n\n### Exercise 2: Reshaping {#pivot_ue}\n\nBring the following data into long format:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue11b <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\", col_select = c(\"pnr\", \"welle\", \"famstand\")) %>%\n  slice(200:210) %>%\n  filter(welle %in% 2:3)\n\npend_ue11b %>% pivot_wider(names_from = welle, values_from = famstand)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 3\n#>          pnr `2`                                             `3`                \n#>        <dbl> <dbl+lbl>                                       <dbl+lbl>          \n#> 1 1000014501 -4 [Question mistakenly not asked]              3 [Married/civil p…\n#> 2 1000014701  2 [Married/civil partnership, living together] 2 [Married/civil p…\n#> 3 1000014702  2 [Married/civil partnership, living together] 2 [Married/civil p…\n```\n\n\n:::\n:::\n\n\n\n\nUsing `names_prefix = \"wave\"`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue11b %>% pivot_wider(names_from = welle, values_from = famstand, names_prefix = \"wave\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 3 × 3\n#>          pnr wave2                                           wave3              \n#>        <dbl> <dbl+lbl>                                       <dbl+lbl>          \n#> 1 1000014501 -4 [Question mistakenly not asked]              3 [Married/civil p…\n#> 2 1000014701  2 [Married/civil partnership, living together] 2 [Married/civil p…\n#> 3 1000014702  2 [Married/civil partnership, living together] 2 [Married/civil p…\n```\n\n\n:::\n:::\n\n\n\n\n[Back to top](#uepivot)\n",
    "supporting": [
      "05_merge_pivot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}