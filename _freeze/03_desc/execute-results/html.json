{
  "hash": "15e96a4604e47f959cc74f795ab3b082",
  "result": {
    "engine": "knitr",
    "markdown": "# Getting an Overview {#tab}\n\n\n\n\n\n\n\n\n\nAfter importing datasets, we want to get an overview. Every statistical analysis starts with a description of the variables. In this session, we will see how to use tables to get an overview of the information in a dataset. We will also work with the PASS Campus File in this session. Let's start by loading the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfdz_install(\"haven\") # if not already installed \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # data import for Stata datasets\nlibrary(tidyverse) # tidyverse\npend <- read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n```\n:::\n\n\n\n\n## Frequency Counts\n\nWe have various commands available to create a frequency count:\n\n+ `table()`\n+ `count()` from `{dplyr}`\n\n\nThe simplest command for counting frequencies is the `table()` command. For example, with the variable `statakt` representing the education status of respondents:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n -10   -9   -5    1    2    3 \n3765 3289  280 9470 6139 5481 \n```\n\n\n:::\n:::\n\n\n\nHere, we see the absolute frequencies displayed. The first row lists the different values, and the second row shows the frequencies.\n\nHowever, the labels are ignored in the output of `table()`. A look into the PASS data report or using `attributes()` reveals the value labels:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(pend$statakt)$labels\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Item not surveyed in questionnaire version \n                                           -10 \n                     Item not surveyed in wave \n                                            -9 \n          Cannot be generated (missing values) \n                                            -5 \nIn occupation with earnings >400 EUR per month \n                                             1 \n                        Unemployed, registered \n                                             2 \n                        Pupil/student (school) \n                                             3 \n                       Apprenticeship/Studying \n                                             4 \n                  Military or civilian service \n                                             5 \n                  Carrying out domestic duties \n                                             6 \n           Maternity protection/parental leave \n                                             7 \n                    Pensioner/early retirement \n                                             8 \n                                         Other \n                                             9 \n         Unemployed, not registered (since W4) \n                                            10 \n                Ill/unfit to work/unemployable \n                                            11 \n                   Self-employed/family worker \n                                            12 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n9470 respondents are employed, 5481 respondents are inactive, etc. (More on labels and working with value labels in R later.)\n\nWith `count()` from `{dplyr}`, we get the labels displayed directly. Again, we use the [pipe `%>%`](#pipe):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  statakt                                                  n\n  <dbl+lbl>                                            <int>\n1 -10 [Item not surveyed in questionnaire version]      3765\n2  -9 [Item not surveyed in wave]                       3289\n3  -5 [Cannot be generated (missing values)]             280\n4   1 [In occupation with earnings >400 EUR per month]  9470\n5   2 [Unemployed, registered]                          6139\n6   3 [Pupil/student (school)]                          5481\n```\n\n\n:::\n:::\n\n\n\n\nWe can also store tables under a freely chosen name and call them up later:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 <- table(pend$statakt)\nt2 <- pend %>% count(statakt)\n```\n:::\n\n\n\n\nWe see here that the table with `table()` creates a new object form, a table. With `count()`, however, a `data.frame` is created.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(t1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"table\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(t2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n## Missing Values in R: `NA` {#NA03}\n\nNegative values are a bit annoying.\n\nTo mark the values like `-5` as missing data in R, we need to set them to `NA` in `pend`. \nTo do this, we call `pend$statakt` and filter with `[]` only the values for `statakt` equal to `-1`. In the previous chapter, we learned how to call specific values this way:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -5] # only call statakt = -5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<labelled<double>[280]>: Current main occupation, gen. (since W2)\n  [1] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [26] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [51] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [76] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[101] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[126] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[151] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[176] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[201] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[226] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[251] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[276] -5 -5 -5 -5 -5\n\nLabels:\n value                                          label\n   -10     Item not surveyed in questionnaire version\n    -9                      Item not surveyed in wave\n    -5           Cannot be generated (missing values)\n     1 In occupation with earnings >400 EUR per month\n     2                         Unemployed, registered\n     3                         Pupil/student (school)\n     4                        Apprenticeship/Studying\n     5                   Military or civilian service\n     6                   Carrying out domestic duties\n     7            Maternity protection/parental leave\n     8                     Pensioner/early retirement\n     9                                          Other\n    10          Unemployed, not registered (since W4)\n    11                 Ill/unfit to work/unemployable\n    12                    Self-employed/family worker\n```\n\n\n:::\n:::\n\n\n\n(Here, we get the labels again, which is somewhat suboptimal for clarity.)\n\nIf we then assign a new value with `<-`, the called values will be overwritten - here, we overwrite all values for `statakt == -1` with `NA`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -5]  <- NA\n```\n:::\n\n\n\n\nHowever, we have not yet overwritten all the negative values; `-10` and `-9` are still missing.\nOf course, it would be possible this way, but it's a bit cumbersome:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -9 ]  <- NA\npend$statakt[pend$statakt == -10]  <- NA\n```\n:::\n\n\n\n\nFor the PASS data, it's shorter to use `< 0`, because all missing codes are less than 0:[^match_op03]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt < 0 ]  <- NA\n```\n:::\n\n\n\n\n[^match_op03]: For non-systematic values, we can use the `%in%` operator that we already learned about in connection with [`filter()`](#filter): `pend$var1[pend$var1 %in% c(-9,2,124) ]  <- NA` (this is just an example).\n\nIn `count()`, `NA` is also counted:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  statakt                                                 n\n  <dbl+lbl>                                           <int>\n1  1 [In occupation with earnings >400 EUR per month]  9470\n2  2 [Unemployed, registered]                          6139\n3  3 [Pupil/student (school)]                          5481\n4 NA                                                   7334\n```\n\n\n:::\n:::\n\n\n\nIf we want to avoid this, we use `filter()` again - with `is.na()`, we can identify `NA`. By prefixing with `!`, we can request that all non-`NA` values be retained with `TRUE`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% filter(!is.na(statakt)) %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  statakt                                                n\n  <dbl+lbl>                                          <int>\n1 1 [In occupation with earnings >400 EUR per month]  9470\n2 2 [Unemployed, registered]                          6139\n3 3 [Pupil/student (school)]                          5481\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Other Table Values\n\nWith the help of additional functions, we can customize the frequency table to match the Stata with `tab statakt`:\n\n\n\n::: {.cell collectcode='false'}\n::: {.cell-output .cell-output-stdout}\n\n```\n   Current main occupation, gen. (since |\n                                    W2) |      Freq.     Percent        Cum.\n----------------------------------------+-----------------------------------\nIn occupation with earnings >400 EUR pe |      9,470       44.90       44.90\n                 Unemployed, registered |      6,139       29.11       74.01\n                 Pupil/student (school) |      5,481       25.99      100.00\n----------------------------------------+-----------------------------------\n                                  Total |     21,090      100.00\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab1 <- pend %>% filter(!is.na(statakt)) %>% count(statakt)\n```\n:::\n\n\n\n\n\n\n+ `prop.table()`: relative values/percentages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab1$pct <- prop.table(tab1$n) \ntab1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  statakt                                                n   pct\n  <dbl+lbl>                                          <int> <dbl>\n1 1 [In occupation with earnings >400 EUR per month]  9470 0.449\n2 2 [Unemployed, registered]                          6139 0.291\n3 3 [Pupil/student (school)]                          5481 0.260\n```\n\n\n:::\n:::\n\n\n\n29.109% of respondents are unemployed.\n\n+ `prop.table()` with `cumsum()`: cumulative relative frequencies\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab1$cum <- prop.table(tab1$n) %>% cumsum()\ntab1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  statakt                                                n   pct   cum\n  <dbl+lbl>                                          <int> <dbl> <dbl>\n1 1 [In occupation with earnings >400 EUR per month]  9470 0.449 0.449\n2 2 [Unemployed, registered]                          6139 0.291 0.740\n3 3 [Pupil/student (school)]                          5481 0.260 1    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n74.011% of respondents are employed or unemployed (and not inactive).\n\n### [Exercise](#descue1) {#ue3_1}\n\n\n## Contingency Tables\n\nContingency tables allow us to explore how frequently combinations of different variables occur together. \nLet's look at two ways to create contingency tables in R. \n\nUsing `count()` from the `{dplyr}` package, we create a contingency table by inserting two variables. \nFor instance, if we want to see the frequencies of employment status (`statakt`) by gender (`zpsex`), we can use the following command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(zpsex, statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  zpsex      statakt                                                 n\n  <dbl+lbl>  <dbl+lbl>                                           <int>\n1 1 [Male]    1 [In occupation with earnings >400 EUR per month]  4685\n2 1 [Male]    2 [Unemployed, registered]                          3240\n3 1 [Male]    3 [Pupil/student (school)]                          2047\n4 1 [Male]   NA                                                   3555\n5 2 [Female]  1 [In occupation with earnings >400 EUR per month]  4785\n6 2 [Female]  2 [Unemployed, registered]                          2899\n7 2 [Female]  3 [Pupil/student (school)]                          3434\n8 2 [Female] NA                                                   3779\n```\n\n\n:::\n\n```{.r .cell-code}\ntab2 <- pend %>% count(zpsex, statakt)\ntab2$pct <- prop.table(tab2$n)\ntab2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  zpsex      statakt                                                 n    pct\n  <dbl+lbl>  <dbl+lbl>                                           <int>  <dbl>\n1 1 [Male]    1 [In occupation with earnings >400 EUR per month]  4685 0.165 \n2 1 [Male]    2 [Unemployed, registered]                          3240 0.114 \n3 1 [Male]    3 [Pupil/student (school)]                          2047 0.0720\n4 1 [Male]   NA                                                   3555 0.125 \n5 2 [Female]  1 [In occupation with earnings >400 EUR per month]  4785 0.168 \n6 2 [Female]  2 [Unemployed, registered]                          2899 0.102 \n7 2 [Female]  3 [Pupil/student (school)]                          3434 0.121 \n8 2 [Female] NA                                                   3779 0.133 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab2 %>% mutate(pct_zpsex= prop.table(n), .by = zpsex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 5\n  zpsex      statakt                                          n    pct pct_zpsex\n  <dbl+lbl>  <dbl+lbl>                                    <int>  <dbl>     <dbl>\n1 1 [Male]    1 [In occupation with earnings >400 EUR pe…  4685 0.165      0.346\n2 1 [Male]    2 [Unemployed, registered]                   3240 0.114      0.240\n3 1 [Male]    3 [Pupil/student (school)]                   2047 0.0720     0.151\n4 1 [Male]   NA                                            3555 0.125      0.263\n5 2 [Female]  1 [In occupation with earnings >400 EUR pe…  4785 0.168      0.321\n6 2 [Female]  2 [Unemployed, registered]                   2899 0.102      0.195\n7 2 [Female]  3 [Pupil/student (school)]                   3434 0.121      0.231\n8 2 [Female] NA                                            3779 0.133      0.254\n```\n\n\n:::\n:::\n\n\n\n\n### [*Exercise*](#descue2) {#ue3_2}\n\n## Summary Statistics\n\nFor numerical variables, such as income (`netges`), we often compute summary statistics like the mean, median, or quantiles. To get a quick overview, use `summary()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n    -5.0     -3.0     -3.0    567.9    990.0 111419.0 \n```\n\n\n:::\n\n```{.r .cell-code}\npend$netges[pend$netges < 0] <- NA # Handling Missing Data\nsummary(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0     880    1320    1562    1890  111419   18056 \n```\n\n\n:::\n:::\n\n\n\n\n\n### Calculating Specific Statistics\n\nTo calculate specific statistics, we can use:\n\n- Minimum: `min()`\n- Maximum: `max()`\n- Mean: `mean()`\n- Median: `median()`\n- Quantiles: `quantile()`\n- Variance: `var()`\n- Standard Deviation: `sd()`\n\nFor instance, the mean of income.\nSetting `na.rm = TRUE` forces R to ignore missing values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(pend$netges, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1562.3\n```\n\n\n:::\n:::\n\n\n\n\n### Custom Summary with `summarise()`\n\nYou can use `summarise()` from `{dplyr}` to create custom summary tables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>%\n  summarise(\n    Minimum = min(netges, na.rm = TRUE),\n    Median = median(netges, na.rm = TRUE),\n    Mean = mean(netges, na.rm = TRUE),\n    Maximum = max(netges, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  Minimum   Median  Mean Maximum  \n  <dbl+lbl>  <dbl> <dbl> <dbl+lbl>\n1 0           1320 1562. 111419   \n```\n\n\n:::\n:::\n\n\n\n\n### Comparing Across Groups\n\nTo compare statistics across groups, use `.by` in `summarise()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>%\n  summarise(\n    Minimum = min(netges, na.rm = TRUE),\n    Median = median(netges, na.rm = TRUE),\n    Mean = mean(netges, na.rm = TRUE),\n    Maximum = max(netges, na.rm = TRUE),\n    .by = welle\n  ) %>% arrange(welle)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 5\n   welle                   Minimum   Median  Mean Maximum  \n   <dbl+lbl>               <dbl+lbl>  <dbl> <dbl> <dbl+lbl>\n 1  1 [Wave 1 (2006/2007)] 1          1200  1525. 111419   \n 2  2 [Wave 2 (2007/2008)] 0          1320  1529.   7200   \n 3  3 [Wave 3 (2008/2009)] 0          1298. 1498.  12000   \n 4  4 [Wave 4 (2010)]      0          1210  1447.  10800   \n 5  5 [Wave 5 (2011)]      0          1250  1494.  33363   \n 6  6 [Wave 6 (2012)]      0          1215  1459.  15950   \n 7  7 [Wave 7 (2013)]      0          1250  1539.  87835   \n 8  8 [Wave 8 (2014)]      0          1255  1456.   9000   \n 9  9 [Wave 9 (2015)]      0          1280  1613. 110451   \n10 10 [Wave 10 (2016)]     0          1375  1541.   6300   \n11 11 [Wave 11 (2017)]     0          1500  1748.  44440   \n12 12 [Wave 12 (2018)]     0          1500  1667.   7150   \n13 13 [Wave 13 (2019)]     0          1550  1816.  88453   \n```\n\n\n:::\n:::\n\n\n\n\nGiven that the resulting 'table' is a data.frame, we can also filter for specific waves if needed:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% \n  summarise(\n    Minimum = min(netges, na.rm = TRUE),\n    Median = median(netges, na.rm = TRUE),\n    Mean = mean(netges, na.rm = TRUE),\n    Maximum = max(netges, na.rm = TRUE),\n    .by = welle\n  ) %>% \n  filter(welle %in% c(1, 10)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  welle                   Minimum   Median  Mean Maximum  \n  <dbl+lbl>               <dbl+lbl>  <dbl> <dbl> <dbl+lbl>\n1  1 [Wave 1 (2006/2007)] 1           1200 1525. 111419   \n2 10 [Wave 10 (2016)]     0           1375 1541.   6300   \n```\n\n\n:::\n:::\n\n\n\n\nThese methods allow for thorough analysis of both categorical and numerical data in R.\n\n### [Exercise](#descue3) {#ue3_3}\n\n\n## Exercises\n\nUse the PASS CampusFile `PENDDAT_cf_W13.dta` for all exercises:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\npend <- read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n```\n:::\n\n\n\n\n**[As a reminder: you can find an overview of the data import commands here](02_intro.qmd#import)**\n\n### Exercise 1 {#descue1}\n\nWe are interested in the variable `famstand`, which contains the marital status of the respondents:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"tsddmunklj\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#tsddmunklj table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#tsddmunklj thead, #tsddmunklj tbody, #tsddmunklj tfoot, #tsddmunklj tr, #tsddmunklj td, #tsddmunklj th {\n  border-style: none;\n}\n\n#tsddmunklj p {\n  margin: 0;\n  padding: 0;\n}\n\n#tsddmunklj .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 11px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#tsddmunklj .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#tsddmunklj .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#tsddmunklj .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#tsddmunklj .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#tsddmunklj .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#tsddmunklj .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#tsddmunklj .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#tsddmunklj .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#tsddmunklj .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#tsddmunklj .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#tsddmunklj .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#tsddmunklj .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#tsddmunklj .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#tsddmunklj .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tsddmunklj .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#tsddmunklj .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#tsddmunklj .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#tsddmunklj .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tsddmunklj .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#tsddmunklj .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tsddmunklj .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#tsddmunklj .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tsddmunklj .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tsddmunklj .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tsddmunklj .gt_left {\n  text-align: left;\n}\n\n#tsddmunklj .gt_center {\n  text-align: center;\n}\n\n#tsddmunklj .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#tsddmunklj .gt_font_normal {\n  font-weight: normal;\n}\n\n#tsddmunklj .gt_font_bold {\n  font-weight: bold;\n}\n\n#tsddmunklj .gt_font_italic {\n  font-style: italic;\n}\n\n#tsddmunklj .gt_super {\n  font-size: 65%;\n}\n\n#tsddmunklj .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#tsddmunklj .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#tsddmunklj .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#tsddmunklj .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#tsddmunklj .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#tsddmunklj .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#tsddmunklj .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#tsddmunklj .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#tsddmunklj div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"famstand\">Marital status, gen.</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"label\">Marital status, gen.</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-8</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Implausible value</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-4</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Question mistakenly not asked</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-3</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Not applicable (filter)</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-2</td>\n<td headers=\"label\" class=\"gt_row gt_center\">No answer</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 1</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Single</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 2</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Married/civil partnership, living together</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 3</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Married/civil partnership, not living together</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 4</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Divorced</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 5</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Widowed</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n+ Display a table with absolute frequencies of `famstand` using both `table()` and `count()` (Remember to load `{tidyverse}` for `count()`). \n+ Overwrite missing codes with `NA`.\n+ Did the replacement of missing values with NA work? Create the table again.\n+ Display the relative frequencies (proportions). Use `prop.table()` \n\n[Back to top](#ue3_1)\n\n### Exercise 2 {#descue2}\n\n+ Create a contingency table for `famstand` and `zpsex` using `count()`.\n+ What percentage of the respondents are divorced women? Use `prop.table()` \n\n[Back to top](#ue3_2)\n\n### Exercise 3 {#descue3}\n\nDescribe the age of respondents (`palter`) using `summary` and create your own overview using `summarise()` to compare respondent age by marital status.\n\n  + First, overwrite missing values with `NA`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$palter[pend$palter<0] <- NA\npend$famstand[pend$famstand<0] <- NA\n```\n:::\n\n\n\n\n  + Create an overview using `summary()`.\n  + Create an overview with the minimum, median, mean, variance, and maximum age values using `summarise()`.\n  + Extend this overview to display the summary statistics for the different `famstand` categories.\n\n[Back to top](#ue3_3)\n\n## Notes\n\n### Rounding with `round()` {#round}\n\nExplanation: You can round values to a certain number of digits using `round(x , 3)`. The second number in the parentheses (after the comma) specifies how many decimal places you want:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(21.12121123,digits = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21.121\n```\n\n\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21.12121\n```\n\n\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n:::\n\n\n\n\nWe can round the relative frequencies to make the table above more readable:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~zpsex+statakt, data = pend) %>% \n  prop.table(.,margin = 1) %>% \n  round(.,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     statakt\nzpsex     1     2     3\n    1 0.470 0.325 0.205\n    2 0.430 0.261 0.309\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}