{
  "hash": "8ccb1a77430c0a378bfd14b784817eae",
  "result": {
    "engine": "knitr",
    "markdown": "\n# Creating map Visualizations with `{ggplot2}` {#map}\n\n\n\n\n\n\n\n\n\nIn addition to the classic graphics presented in [Chapter 5](#viz), there is a whole range of extensions available in `{ggplot2}`.\n\n\nFor maps and spatial data work, the `{sf}` package is available and allows to plot \"Choropleths\" (thematic maps) with `{ggplot2}`.\nThe great thing is: we can process `{sf}` data with the familiar `{tidyverse}` commands. \nTo create a map, we need a *shapefile* that contains information about the areas to be displayed. \nFor Germany, the [Geodata Center of the Federal Agency for Cartography and Geodesy](http://gdz.bkg.bund.de/) provides shapefiles for municipalities, districts, and states.\n\n::: {.callout-tip}\n## [Here](https://daten.gdz.bkg.bund.de/produkte/vg/vg250_ebenen_0101/) you can find shapefiles for different years.\n\nUsually, the results or data we want to display are based on a specific area status (due to territorial reforms, there are continuous changes in both areas and identifiers).\nTo avoid complex record linkage, it is helpful to use the shapefile for the relevant year. \n[On this page](https://daten.gdz.bkg.bund.de/produkte/vg/vg250_ebenen_0101/) you can also find past territorial statuses.\nThe files with the name scheme **`vg250_01-01.utm32s.shape.ebenen.zip`** contain the necessary information that we will use in the following.\n\n:::\n\nWe can then join these shapefiles with data based on the AGS ([Official Municipality Key](https://de.wikipedia.org/wiki/Amtlicher_Gemeindeschl%C3%BCssel)) and display them as a map:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](15_map_files/figure-html/map1-1.png){width=384}\n:::\n:::\n\n\n\n\nTo load a shapefile, we first install `{sf}` and then load it with `library()`. \nThe actual loading is done by the `read_sf()` command, where we need to specify both the file path in the unpacked folder with the shapefiles and the `layer`, i.e., the level. \nIn the BKG shapefiles, there are the following layers:\n\n+ `VG250_LAN`: Federal States (2-digit AGS)\n+ `VG250_KRS`: Districts and Independent Cities (5-digit AGS)\n+ `VG250_GEM`: Cities and Municipalities (8-digit AGS)\n\nSo, if we want to load the federal states, we proceed as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlan17 <- sf::read_sf(\"./orig/vg250_2017.utm32s.shape.ebenen/vg250_ebenen\",\n                     layer=\"VG250_LAN\")\n```\n:::\n\n\n\n\nThe `lan17` object can now be used for a `ggplot()` command.\n`lan17` also contains the sea areas, which we can filter to land areas only using a `filter()` command (`GF` = 4):\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nggplot(lan17) + \n    geom_sf(size = .1)  +\n    labs(title = \"Federal States by Area Status 2017\") +\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](15_map_files/figure-html/mapplot-1.png){width=576}\n:::\n\n```{.r .cell-code}\nggplot(lan17 %>% filter(GF==4)) + \n    geom_sf(size = .1)  +\n    labs(title = \"Federal States by Area Status 2017\") +\n    theme_void()\n```\n\n::: {.cell-output-display}\n![](15_map_files/figure-html/mapplot-2.png){width=576}\n:::\n:::\n\n\n\n\n\nIf we now want to color the federal states, for example, by the unemployment rate, we need to incorporate this data. \nFor simplicity, I will simulate the values here:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalo_df <- \n  data.frame(ags = unique(lan17$AGS),\n             alq = sample(seq(.03,.095,.001) ,size = 16,replace = T))\nhead(alo_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ags   alq\n1  01 0.088\n2  02 0.062\n3  03 0.094\n4  04 0.094\n5  05 0.034\n6  06 0.067\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWe can now join the `alo_df` data to the `lan17` shapefile using a [`left_join()`](#join).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlan17 %>% filter(GF==4) %>% left_join(alo_df,by = join_by(\"AGS\"==\"ags\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlan17 %>% filter(GF==4) %>% left_join(alo_df,by = join_by(\"AGS\"==\"ags\")) %>% \n  select(AGS,GEN,alq) %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 280371.1 ymin: 5471366 xmax: 674202.3 ymax: 6101444\nProjected CRS: ETRS89 / UTM zone 32N\n# A tibble: 6 × 4\n  AGS   GEN                   alq                                       geometry\n  <chr> <chr>               <dbl>                             <MULTIPOLYGON [m]>\n1 01    Schleswig-Holstein  0.088 (((464810.7 6100447, 464936.7 6100389, 465073…\n2 02    Hamburg             0.062 (((578219 5954278, 578433.9 5954189, 578557.7…\n3 03    Niedersachsen       0.094 (((479451.1 5971302, 479365.8 5971220, 479213…\n4 04    Bremen              0.094 (((466930.3 5897851, 467015.7 5897733, 467379…\n5 05    Nordrhein-Westfalen 0.034 (((477607.3 5818769, 477708 5818638, 477758.9…\n6 06    Hessen              0.067 (((534242 5721822, 534214.5 5721748, 534149.4…\n```\n\n\n:::\n:::\n\n\n\n\nThe syntax for the actual plot is then similar to any other `ggplot()` - with `fill =` we can specify a fill color and with `scale_fill_...` we can choose a color palette:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scico)\nlan17 %>% \n  filter(GF==4) %>% \n  left_join(alo_df,by = join_by(\"AGS\"==\"ags\")) %>% \n  ggplot() + \n      geom_sf(size = .1, aes(fill = alq))  +\n      labs(title = \"Unemployment Rate for Federal States\",\n           subtitle = \"(not real data)\",\n           fill = \"Unemployment\\nrate\") +\n      scale_fill_scico(palette = \"oslo\") + # requires scico package\n      theme_void()\n```\n\n::: {.cell-output-display}\n![](15_map_files/figure-html/mapplot2-1.png){width=480}\n:::\n:::\n\n\n\n\n## Modify sf shape data.frames\n\nWe can use the familiar `{dplyr}` functions to amend the sf data.\nHere's are rather silly example how to combine Saxony, Saxony-Anhalt and Thuringa into one unit:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlan17_15länder <- \n  lan17 %>% \n  filter(GF==4) %>%\n  mutate(newid = case_when(as.numeric(AGS)>13 ~ \"17\",  TRUE ~ AGS)) %>% # same ID for SN, SA, TH\n  summarise(geometry = st_union(geometry),.by = newid) # summarise -> combine based on newid\n  \nggplot(lan17_15länder) + \n  geom_sf(size = .1, aes(fill = as.numeric(newid)) )  +\n  scale_fill_scico(palette = \"oslo\") + # requires scico package\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](15_map_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## Exercise\n\nCreate a map yourself - for the country, district, or municipality level.\n\n+ You can find the shapefile for the year 2017 in the course folder under `/orig` in the Quickablage.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}