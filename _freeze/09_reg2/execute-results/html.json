{
  "hash": "28ad292064ef89e6f036af4c1f31c0de",
  "result": {
    "engine": "knitr",
    "markdown": "# Regression Models: Extensions\n\n\n\n\n\n\n\n\n\nAfter covering the basics of regression models, this chapter explores some useful extensions of regression models in R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndat1 <- data.frame(id = 1:8,\n                   var1 = c(2,1,2,5,7,8,9,5),\n                   var2 = c(2,2,1,9,7,4,25,3),\n                   educ = c(3,1,2,2,1,3,2,-1),\n                   gend = c(2,1,1,2,1,2,1,2),\n                   x = c(2,1,2,4,1,NA,NA,NA))\ndat1$ed_fct <- factor(dat1$educ, levels = 1:3,\n                        labels = c(\"basic\",\"medium\",\"high\"))\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id var1 var2 educ gend  x ed_fct\n1  1    2    2    3    2  2   high\n2  2    1    2    1    1  1  basic\n3  3    2    1    2    1  2 medium\n4  4    5    9    2    2  4 medium\n5  5    7    7    1    1  1  basic\n6  6    8    4    3    2 NA   high\n7  7    9   25    2    1 NA medium\n8  8    5    3   -1    2 NA   <NA>\n```\n\n\n:::\n:::\n\n\n\n\n+ [Complete rows with `complete.cases()`](#complcses) -> `e(sample)` in Stata\n+ [Interactions](#inter) -> `c.var1##c.var2` in Stata\n+ [Quadratic Terms](#quad) -> `c.var1##c.var1` in Stata\n+ [Applying Weights](#gew) \n+ [Robust Standard Errors](#rbst)\n+ [Fixed Effects Models](#fe)\n+ [Multilevel Models](#mlvl)\n\n## Keeping Only Complete Rows {#complcses}\n\nWhen we compare models `m1` and `m3`, we see different sample sizes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- lm(var2 ~ var1, data = dat1)  \nm4 <- lm(var2 ~ ed_fct + var1, data = dat1)\nmodelsummary(list(\"m1\"=m1,\"m4\"=m4), gof_omit = \"IC|RM|Log|F\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_r5ljdyd2xf7dtev7aops(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_r5ljdyd2xf7dtev7aops\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_r5ljdyd2xf7dtev7aops');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_r5ljdyd2xf7dtev7aops(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_r5ljdyd2xf7dtev7aops\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 11, j: 1 }, { i: 11, j: 2 },  ], css_id: 'tinytable_css_0qsy4q0m46oyd0cfpa96',}, \n          { positions: [ { i: 8, j: 2 }, { i: 8, j: 1 },  ], css_id: 'tinytable_css_cqhk7zezvkdysggmzwxj',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 5, j: 1 }, { i: 6, j: 1 }, { i: 7, j: 1 }, { i: 4, j: 1 }, { i: 9, j: 1 }, { i: 10, j: 1 }, { i: 3, j: 2 }, { i: 9, j: 2 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 7, j: 2 }, { i: 4, j: 2 }, { i: 5, j: 2 }, { i: 6, j: 2 }, { i: 10, j: 2 },  ], css_id: 'tinytable_css_hzkgm4rsichkg3jv492k',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_k2a5xjj0bxuatgcayjbn',}, \n          { positions: [ { i: 11, j: 0 },  ], css_id: 'tinytable_css_r11gzmxxazocggcb6lr3',}, \n          { positions: [ { i: 8, j: 0 },  ], css_id: 'tinytable_css_c91e2lo715v0da3csa0j',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 6, j: 0 }, { i: 7, j: 0 }, { i: 9, j: 0 }, { i: 10, j: 0 },  ], css_id: 'tinytable_css_kak9h7if2mfkugygz3dv',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_lst0h0hzzx5wyxn2wu1a',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_r5ljdyd2xf7dtev7aops(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_0qsy4q0m46oyd0cfpa96, .table th.tinytable_css_0qsy4q0m46oyd0cfpa96 { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_cqhk7zezvkdysggmzwxj, .table th.tinytable_css_cqhk7zezvkdysggmzwxj { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_hzkgm4rsichkg3jv492k, .table th.tinytable_css_hzkgm4rsichkg3jv492k { text-align: center; }\n      .table td.tinytable_css_k2a5xjj0bxuatgcayjbn, .table th.tinytable_css_k2a5xjj0bxuatgcayjbn { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_r11gzmxxazocggcb6lr3, .table th.tinytable_css_r11gzmxxazocggcb6lr3 { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_c91e2lo715v0da3csa0j, .table th.tinytable_css_c91e2lo715v0da3csa0j { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_kak9h7if2mfkugygz3dv, .table th.tinytable_css_kak9h7if2mfkugygz3dv { text-align: left; }\n      .table td.tinytable_css_lst0h0hzzx5wyxn2wu1a, .table th.tinytable_css_lst0h0hzzx5wyxn2wu1a { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_r5ljdyd2xf7dtev7aops\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">m1</th>\n                <th scope=\"col\">m4</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>-2.340</td>\n                  <td>-2.511</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(4.345)</td>\n                  <td>(5.681)</td>\n                </tr>\n                <tr>\n                  <td>var1</td>\n                  <td>1.839</td>\n                  <td>1.753</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.773)</td>\n                  <td>(0.835)</td>\n                </tr>\n                <tr>\n                  <td>ed_fctmedium</td>\n                  <td></td>\n                  <td>4.830</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td></td>\n                  <td>(6.038)</td>\n                </tr>\n                <tr>\n                  <td>ed_fcthigh</td>\n                  <td></td>\n                  <td>-3.253</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td></td>\n                  <td>(6.554)</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>8</td>\n                  <td>7</td>\n                </tr>\n                <tr>\n                  <td>R2</td>\n                  <td>0.486</td>\n                  <td>0.700</td>\n                </tr>\n                <tr>\n                  <td>R2 Adj.</td>\n                  <td>0.400</td>\n                  <td>0.400</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\nIt appears that in model `m4`, one case is lost with `ed_fct`. Why is that? Itâ€™s worth taking a look at the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id var1 var2 educ gend  x ed_fct\n1  1    2    2    3    2  2   high\n2  2    1    2    1    1  1  basic\n3  3    2    1    2    1  2 medium\n4  4    5    9    2    2  4 medium\n5  5    7    7    1    1  1  basic\n6  6    8    4    3    2 NA   high\n7  7    9   25    2    1 NA medium\n8  8    5    3   -1    2 NA   <NA>\n```\n\n\n:::\n:::\n\n\n\n\nThe value for `ed_fct` is missing for `id` = 8.\n\nTo compare the models, we should use only the rows where `ed_fct` values are available. We can manually select these rows (excluding `id`=8), but this can be cumbersome with larger datasets.\n\n### `complete.cases()`\n\nHere, `complete.cases()` is helpful. This function creates a logical variable that is `TRUE` for all complete cases (i.e., without `NA`). Incomplete cases are marked as `FALSE`. We specify which variables to consider for this check and add the variable to the dataset as a new column. For model 1, a case is considered `complete` if both `var2` and `var1` are present. So, we select the relevant variables with `select()` and apply `complete.cases` to this selection:\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% select(var1, var2) %>% complete.cases(.) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1$compl_m1 <- dat1 %>% select(var1, var2) %>% complete.cases(.) \ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id var1 var2 educ gend  x ed_fct compl_m1\n1  1    2    2    3    2  2   high     TRUE\n2  2    1    2    1    1  1  basic     TRUE\n3  3    2    1    2    1  2 medium     TRUE\n4  4    5    9    2    2  4 medium     TRUE\n5  5    7    7    1    1  1  basic     TRUE\n6  6    8    4    3    2 NA   high     TRUE\n7  7    9   25    2    1 NA medium     TRUE\n8  8    5    3   -1    2 NA   <NA>     TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-warning collapse=\"true\"}\n# `complete.cases()` alone searches for `NA` in all variables\nNote: if we do not specify variables, `NA` will be considered from all variables, including `x`, which we are not interested in here:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% complete.cases(.) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1$compl <- dat1 %>% complete.cases(.) \ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id var1 var2 educ gend  x ed_fct compl_m1 compl\n1  1    2    2    3    2  2   high     TRUE  TRUE\n2  2    1    2    1    1  1  basic     TRUE  TRUE\n3  3    2    1    2    1  2 medium     TRUE  TRUE\n4  4    5    9    2    2  4 medium     TRUE  TRUE\n5  5    7    7    1    1  1  basic     TRUE  TRUE\n6  6    8    4    3    2 NA   high     TRUE FALSE\n7  7    9   25    2    1 NA medium     TRUE FALSE\n8  8    5    3   -1    2 NA   <NA>     TRUE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n:::\n\nWe do the same for model `m4`, which includes `ed_fct` in addition to `var2` and `var1`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$compl_m4 <- dat1 %>% select(var1, var2, ed_fct) %>% complete.cases(.)\n```\n:::\n\n\n\n\nHereâ€™s how it looks in the dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id var1 var2 educ gend  x ed_fct compl_m1 compl_m4\n1  1    2    2    3    2  2   high     TRUE     TRUE\n2  2    1    2    1    1  1  basic     TRUE     TRUE\n3  3    2    1    2    1  2 medium     TRUE     TRUE\n4  4    5    9    2    2  4 medium     TRUE     TRUE\n5  5    7    7    1    1  1  basic     TRUE     TRUE\n6  6    8    4    3    2 NA   high     TRUE     TRUE\n7  7    9   25    2    1 NA medium     TRUE     TRUE\n8  8    5    3   -1    2 NA   <NA>     TRUE    FALSE\n```\n\n\n:::\n:::\n\n\n\n\n### Finding Cases with Missing Values\n\nNow, we can filter by these variables and examine these cases more closely. We filter for cases that are included in `m1` (i.e., `compl_m1` = `TRUE`) but not in `m4` (`compl_m4` = `FALSE`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% filter(compl_m1 == T & compl_m4 == F) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id var1 var2 educ gend  x ed_fct compl_m1 compl_m4\n1  8    5    3   -1    2 NA   <NA>     TRUE    FALSE\n```\n\n\n:::\n:::\n\n\n\n\n### Calculating Models with Only Complete Cases\n\nWe can now create model `m1` to include only cases that are also considered in model `m4`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1_m4vars <- lm(var2 ~ var1, data = filter(dat1, compl_m4 == T))\nmodelsummary(list(\"m1\"=m1,\"m1 with m4vars\"=m1_m4vars,\"m4\"=m4), gof_omit = \"IC|RM|Log|F\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_93x8kby994lvrohig8xk(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_93x8kby994lvrohig8xk\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_93x8kby994lvrohig8xk');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_93x8kby994lvrohig8xk(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_93x8kby994lvrohig8xk\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 11, j: 2 }, { i: 11, j: 1 }, { i: 11, j: 3 },  ], css_id: 'tinytable_css_7bskaggrpqb344nybumf',}, \n          { positions: [ { i: 8, j: 3 }, { i: 8, j: 2 }, { i: 8, j: 1 },  ], css_id: 'tinytable_css_7odzpjris6917lw5wrl7',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 5, j: 1 }, { i: 6, j: 1 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 9, j: 1 }, { i: 10, j: 1 }, { i: 7, j: 1 }, { i: 9, j: 2 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 3, j: 2 }, { i: 4, j: 2 }, { i: 5, j: 2 }, { i: 6, j: 2 }, { i: 7, j: 2 }, { i: 9, j: 3 }, { i: 10, j: 3 }, { i: 10, j: 2 }, { i: 3, j: 3 }, { i: 4, j: 3 }, { i: 1, j: 3 }, { i: 2, j: 3 }, { i: 7, j: 3 }, { i: 5, j: 3 }, { i: 6, j: 3 },  ], css_id: 'tinytable_css_vajgugqimfqimamj8gx4',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 3 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_6m1rqn7ceo92vri0isuf',}, \n          { positions: [ { i: 11, j: 0 },  ], css_id: 'tinytable_css_u3bweuz4kesdtlqn53br',}, \n          { positions: [ { i: 8, j: 0 },  ], css_id: 'tinytable_css_zlgl9t13s3todct96nci',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 6, j: 0 }, { i: 7, j: 0 }, { i: 9, j: 0 }, { i: 10, j: 0 },  ], css_id: 'tinytable_css_wwy7850x7v7tffgvi8a8',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_zryckrr7rqishu6k2rym',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_93x8kby994lvrohig8xk(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_7bskaggrpqb344nybumf, .table th.tinytable_css_7bskaggrpqb344nybumf { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_7odzpjris6917lw5wrl7, .table th.tinytable_css_7odzpjris6917lw5wrl7 { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_vajgugqimfqimamj8gx4, .table th.tinytable_css_vajgugqimfqimamj8gx4 { text-align: center; }\n      .table td.tinytable_css_6m1rqn7ceo92vri0isuf, .table th.tinytable_css_6m1rqn7ceo92vri0isuf { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_u3bweuz4kesdtlqn53br, .table th.tinytable_css_u3bweuz4kesdtlqn53br { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_zlgl9t13s3todct96nci, .table th.tinytable_css_zlgl9t13s3todct96nci { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_wwy7850x7v7tffgvi8a8, .table th.tinytable_css_wwy7850x7v7tffgvi8a8 { text-align: left; }\n      .table td.tinytable_css_zryckrr7rqishu6k2rym, .table th.tinytable_css_zryckrr7rqishu6k2rym { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_93x8kby994lvrohig8xk\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">m1</th>\n                <th scope=\"col\">m1 with m4vars</th>\n                <th scope=\"col\">m4</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>-2.340</td>\n                  <td>-1.832</td>\n                  <td>-2.511</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(4.345)</td>\n                  <td>(4.646)</td>\n                  <td>(5.681)</td>\n                </tr>\n                <tr>\n                  <td>var1</td>\n                  <td>1.839</td>\n                  <td>1.848</td>\n                  <td>1.753</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.773)</td>\n                  <td>(0.814)</td>\n                  <td>(0.835)</td>\n                </tr>\n                <tr>\n                  <td>ed_fctmedium</td>\n                  <td></td>\n                  <td></td>\n                  <td>4.830</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                  <td>(6.038)</td>\n                </tr>\n                <tr>\n                  <td>ed_fcthigh</td>\n                  <td></td>\n                  <td></td>\n                  <td>-3.253</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td></td>\n                  <td></td>\n                  <td>(6.554)</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>8</td>\n                  <td>7</td>\n                  <td>7</td>\n                </tr>\n                <tr>\n                  <td>R2</td>\n                  <td>0.486</td>\n                  <td>0.508</td>\n                  <td>0.700</td>\n                </tr>\n                <tr>\n                  <td>R2 Adj.</td>\n                  <td>0.400</td>\n                  <td>0.409</td>\n                  <td>0.400</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\nNow, both `m1 with m4vars` and `m4` have the same number of cases, allowing for a direct comparison of the results.\n\n## Interactions {#inter}\n\nInteractions between two variables can be calculated using `*`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$g_fct <- factor(dat1$gend, levels = 1:2,\n                     labels = c(\"women\",\"men\"))\nm5 <- lm(var2 ~ var1 * g_fct, data = dat1)\nsummary(m5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = var2 ~ var1 * g_fct, data = dat1)\n\nResiduals:\n      1       2       3       4       5       6       7       8 \n-1.5000  2.6145 -0.8827  4.5000 -7.3687 -1.5000  5.6369 -1.5000 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)  \n(Intercept)    -3.1117     4.7702  -0.652   0.5498  \nvar1            2.4972     0.8211   3.041   0.0384 *\ng_fctmen        5.9451     8.4973   0.700   0.5227  \nvar1:g_fctmen  -2.1639     1.5331  -1.411   0.2310  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.493 on 4 degrees of freedom\nMultiple R-squared:  0.7244,\tAdjusted R-squared:  0.5177 \nF-statistic: 3.504 on 3 and 4 DF,  p-value: 0.1286\n```\n\n\n:::\n:::\n\n\n\n`avg_slopes()` from `{marginaleffects}` helps to calculate the marginal effects/slopes of a one-unit increase in `var1` for each subgroup of `g_fct`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\navg_slopes(m5,\n           variables = \"var1\",\n           by = \"g_fct\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n g_fct Estimate Std. Error     z Pr(>|z|)   S  2.5 % 97.5 %\n women    2.497      0.821 3.041  0.00236 8.7  0.888   4.11\n men      0.333      1.295 0.257  0.79684 0.3 -2.204   2.87\n\nTerm: var1\nType:  response \nComparison: dY/dX\n```\n\n\n:::\n:::\n\n\n\n\nInteractions should always be visualized. `plot_predictions()` from `{marginaleffects}` is a very helpful function to plot the predicted values :\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_predictions(m5, condition = c(\"var1\", \"g_fct\"))\n```\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-15-1.png){width=80% height=60%}\n:::\n:::\n\n\n\n\nWe can modify this plot using familiar `{ggplot2}` commands:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_predictions(m5, condition = c(\"var1\", \"g_fct\")) + \n  scale_color_manual(values = c(\"orange\",\"lightskyblue3\"), breaks = c(\"women\",\"men\"), labels=c(\"Women\",\"Men\")) +\n  scale_fill_manual(values = c(\"orange\",\"lightskyblue3\"), breaks = c(\"women\",\"men\"), labels=c(\"Women\",\"Men\")) +\n  labs(title = \"Predicted Values for var2\",\n       color = \"Gender\", fill = \"Gender\",\n       x = \"Values for var1\",\n       y = \"Predicted Values for var1\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-16-1.png){width=60% height=60%}\n:::\n:::\n\n\n\n**[Alternatively, we can create the \"marginsplot\" step by step ourselves](#marginsplot)**\n\n## Quadratic Terms & Polynomials {#quad}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm6 <- lm(var2 ~ var1 + I(var1^2), data = dat1 %>% filter(id != 7))\nsummary(m6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = var2 ~ var1 + I(var1^2), data = dat1 %>% filter(id != \n    7))\n\nResiduals:\n      1       2       3       4       5       6       7 \n-0.5443  1.4334 -1.5443  3.2043  1.2713 -1.0248 -2.7957 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  -1.8580     3.4066  -0.545    0.614\nvar1          2.6481     1.9083   1.388    0.238\nI(var1^2)    -0.2235     0.2110  -1.059    0.349\n\nResidual standard error: 2.524 on 4 degrees of freedom\nMultiple R-squared:  0.5099,\tAdjusted R-squared:  0.2648 \nF-statistic: 2.081 on 2 and 4 DF,  p-value: 0.2402\n```\n\n\n:::\n:::\n\n\n\n\nAgain, `{marginaleffects}` provides a helpful function to visualize the shape of predicted values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_predictions(m6, condition = \"var1\") # conditional adjusted predictions \n```\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-19-1.png){width=60% height=60%}\n:::\n\n```{.r .cell-code}\nplot_slopes(m6, variables = \"var1\", condition = \"var1\") # conditional marginal effects\n```\n\n::: {.cell-output-display}\n![](09_reg2_files/figure-html/unnamed-chunk-19-2.png){width=60% height=60%}\n:::\n:::\n\n\n\n\n## Logistic regression model\n\n\n\n\n\n\n\n\nFor binary dependent variables, logistic regression models are a widely used tool. \nWe can fit logistic regression models in R using `glm()` - for an example, we turn to `PSM0100` (Usage of social networks yes = 1, no = 2) :\n\n\\begin{equation*}\n\\widehat{Logit(soc\\_med=1)} = \\widehat{ln\\left(\\frac{P(soc\\_med=1)}{1-P(soc\\_med=1)}\\right)} = \\hat\\beta0 + \\hat{\\beta1}\\times \\texttt{palter}\n\\end{equation*}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend10 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                          col_select = c(\"palter\",\"PSM0100\")) %>% \n  filter(PSM0100>0) %>% \n  mutate(soc_med = 2- PSM0100)  # convert into 0/1 dummy variable\n\npend10 %>% count(soc_med,PSM0100) # check: soc_med = 1 -> yes, soc_med = 0 -> no\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 3\n  soc_med PSM0100       n\n    <dbl> <dbl+lbl> <int>\n1       0 2 [No]     2873\n2       1 1 [Yes]    2589\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm2 <- glm(soc_med ~ palter, family = \"binomial\", data = pend10)\nsummary(m2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nglm(formula = soc_med ~ palter, family = \"binomial\", data = pend10)\n\nCoefficients:\n             Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  3.194321   0.107660   29.67   <2e-16 ***\npalter      -0.073518   0.002315  -31.75   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 7557.2  on 5461  degrees of freedom\nResidual deviance: 6217.5  on 5460  degrees of freedom\nAIC: 6221.5\n\nNumber of Fisher Scoring iterations: 3\n```\n\n\n:::\n:::\n\n\n\n\n\nThe interpretation of the $\\beta$ coefficients from a logistic regression model pertains to the logits (the logarithms of the odds):\n*There is a statistically significant relationship at the 0.001 level between age and the probability of using social media. With each additional year of age, there is a decrease of 0.073518 in the *logits* of the respondents using social media.*\n\n\n### average marginal effects\nLogits are quite cumbersomeâ€”so how does the *probability* of $\\texttt{soc\\_med} = 1$ change with `palter`? Here, we face the challenge that the derivative of the \"inverse function\" is not as straightforward as in the case of OLS. If we modify the [regression equation from above[^2]](#logmod) with `exp()` and $p=\\frac{Odds}{1+Odds}$, we get:\n\n\\begin{equation*}\n\\widehat{P(soc\\_med=1)} = \\frac{e^{\\hat\\beta0+\\hat\\beta1 \\times \\texttt{palter}}}{1+e^{\\hat\\beta0+\\hat{\\beta1}\\times \\texttt{palter}}}\n\\end{equation*}\n\n[^2]: $\\widehat{Logit(soc\\_med=1)} = \\widehat{ln\\left(\\frac{P(soc\\_med=1)}{1-P(soc\\_med=1)}\\right)} = \\hat\\beta0 + \\hat{\\beta1}\\times \\texttt{palter}$\n\nWe would need to differentiate this expression with respect to `palter` to determine how the predicted probability of $\\texttt{soc\\_med} = 1$ changes with each additional year of respondent age. Given that `palter` appears in both the exponent of the `e` function and both the numerator and denominator (\"top and bottom\"), the differentiation becomes significantly more complex than in the previous `lm()` models.\n\nFor our purposes, it is crucial to note that to compute changes in the predicted probabilities, we need the so-called marginal effects from the `{marginaleffects}` package. This package includes the `avg_slopes()` function, which allows us to calculate a $\\beta$ representing the change in the  _probability_ of $\\texttt{soc\\_med} = 1$ in relation to `palter`. This is known as the *average marginal effect*, as it provides the *average* marginal change in the dependent variable for a one-unit increase in the independent variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfdz_install(\"marginaleffects\") # nur einmal nÃ¶tig\nlibrary(marginaleffects)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navg_slopes(m2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Estimate Std. Error     z Pr(>|z|)   S   2.5 %  97.5 %\n  -0.0142   0.000266 -53.4   <0.001 Inf -0.0147 -0.0137\n\nTerm: palter\nType:  response \nComparison: dY/dX\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n*With each additional year of age, there is on average a decrease of 0.01419 (1.419 percentage points) in the probability of using social media.*\n\n\n## Weighted Regression Model {#gew}\n\nThe `{survey}` package allows including weights when fitting regression model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfdz_install(\"survey\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survey)\npend <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\") %>% filter(netges > 0 , palter > 0, azges1 > 0) %>% \n  mutate(zpsex_fct = factor(zpsex, levels = 1:2, labels = c(\"M\",\"W\")))\nwgt_df <- haven::read_dta(\"./orig/pweights_cf_W13.dta\")\npend_wgt <- pend %>% left_join(wgt_df, by = join_by(pnr,welle))\n\nmodx <- lm(netges ~ palter + I(palter^2),data=pend) # conventional lm() model\n\n# create new data.frame including weights using svydesign() from survey-package\npend_weighted <- svydesign(id      = ~pnr, # id variable\n                           weights = ~wqp, # weight variable\n                           data    = pend_wgt) # original unweighted data \n\n# family = gaussian() provides a linear regression model, like lm() - but respecting weights\nsurvey_modx <- svyglm(netges ~ palter + I(palter^2), \n                    family = gaussian(), data = etb18,design = pend_weighted)\n\nmodelsummary(list(\"lm()\"=modx,\"svyglm()\"= survey_modx),gof_omit = \"RM|IC|Log\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_i0884grktamn3o60bkx5(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_i0884grktamn3o60bkx5\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_i0884grktamn3o60bkx5');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_i0884grktamn3o60bkx5(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_i0884grktamn3o60bkx5\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 10, j: 1 }, { i: 10, j: 2 },  ], css_id: 'tinytable_css_ouctlmyf9nrn8y45b5uo',}, \n          { positions: [ { i: 6, j: 1 }, { i: 6, j: 2 },  ], css_id: 'tinytable_css_to6ydgwm6fvzg6w599uh',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 4, j: 1 }, { i: 5, j: 1 }, { i: 3, j: 2 }, { i: 3, j: 1 }, { i: 8, j: 1 }, { i: 9, j: 1 }, { i: 7, j: 2 }, { i: 7, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 4, j: 2 }, { i: 5, j: 2 }, { i: 8, j: 2 }, { i: 9, j: 2 },  ], css_id: 'tinytable_css_ha66caz5p7nlj8b4pfvv',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_hxiqoc75h5bia8607t3l',}, \n          { positions: [ { i: 10, j: 0 },  ], css_id: 'tinytable_css_kr51yqqp069s797vcy0r',}, \n          { positions: [ { i: 6, j: 0 },  ], css_id: 'tinytable_css_5xic9cqryw3qyohfzxsg',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 7, j: 0 }, { i: 8, j: 0 }, { i: 9, j: 0 },  ], css_id: 'tinytable_css_5tzqw4mi670f6sbk1a5n',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_cvwxq8t5gs3baezswyqi',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_i0884grktamn3o60bkx5(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_ouctlmyf9nrn8y45b5uo, .table th.tinytable_css_ouctlmyf9nrn8y45b5uo { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_to6ydgwm6fvzg6w599uh, .table th.tinytable_css_to6ydgwm6fvzg6w599uh { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_ha66caz5p7nlj8b4pfvv, .table th.tinytable_css_ha66caz5p7nlj8b4pfvv { text-align: center; }\n      .table td.tinytable_css_hxiqoc75h5bia8607t3l, .table th.tinytable_css_hxiqoc75h5bia8607t3l { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_kr51yqqp069s797vcy0r, .table th.tinytable_css_kr51yqqp069s797vcy0r { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_5xic9cqryw3qyohfzxsg, .table th.tinytable_css_5xic9cqryw3qyohfzxsg { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_5tzqw4mi670f6sbk1a5n, .table th.tinytable_css_5tzqw4mi670f6sbk1a5n { text-align: left; }\n      .table td.tinytable_css_cvwxq8t5gs3baezswyqi, .table th.tinytable_css_cvwxq8t5gs3baezswyqi { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_i0884grktamn3o60bkx5\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">lm()</th>\n                <th scope=\"col\">svyglm()</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>811.753</td>\n                  <td>463.721</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(354.363)</td>\n                  <td>(504.015)</td>\n                </tr>\n                <tr>\n                  <td>palter</td>\n                  <td>24.640</td>\n                  <td>53.580</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(17.071)</td>\n                  <td>(26.471)</td>\n                </tr>\n                <tr>\n                  <td>I(palter^2)</td>\n                  <td>-0.147</td>\n                  <td>-0.489</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.197)</td>\n                  <td>(0.314)</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>7996</td>\n                  <td>7996</td>\n                </tr>\n                <tr>\n                  <td>R2</td>\n                  <td>0.004</td>\n                  <td>0.007</td>\n                </tr>\n                <tr>\n                  <td>R2 Adj.</td>\n                  <td>0.004</td>\n                  <td>-2.252</td>\n                </tr>\n                <tr>\n                  <td>F</td>\n                  <td>15.525</td>\n                  <td>8.495</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n## \"Robust\" Standard Errors {#rbst}\n\nOften, standard errors need to be adjusted for violations of general assumptions (homoscedasticity, etc.).\n\nThe good news is that R offers several ways to correct standard errors, including with [{sandwich}](http://sandwich.r-forge.r-project.org/articles/sandwich.html) or [{estimatr}](https://declaredesign.org/r/estimatr/articles/getting-started.html).\n\nA very simple option is the correction of standard errors in `{modelsummary}`, which we will look at in more detail:\n\nWe can request *heteroskedasticity-consistent* (HC) \"robust\" standard errors with the `vcov` option `HC` in `modelsummary()`. \nThe help page for `{modelsummary}` provides a [list of all options](https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html#vcov).\n\nOne option is also `stata`, to replicate results from Stataâ€™s `, robust`. [More here](https://declaredesign.org/r/estimatr/articles/stata-wls-hat.html) about the background and differences.\n\nWe can estimate the following model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1 <- lm(netges ~ palter + I(palter^2),data=pend)\n```\n:::\n\n\n\n\nIn the `modelsummary()`, we can now display the same model with different adjustments for the standard errors:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modelsummary)\nmodelsummary(list(mod1,mod1,mod1,mod1),vcov = c(\"classical\",\"HC\",\"HC2\",\"stata\"),gof_omit = \"RM|IC|Log\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_l07bg203667rjxi480xh(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_l07bg203667rjxi480xh\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_l07bg203667rjxi480xh');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_l07bg203667rjxi480xh(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_l07bg203667rjxi480xh\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 11, j: 3 }, { i: 11, j: 2 }, { i: 11, j: 1 }, { i: 11, j: 4 },  ], css_id: 'tinytable_css_k2c75sbx358qcix8myrg',}, \n          { positions: [ { i: 6, j: 3 }, { i: 6, j: 2 }, { i: 6, j: 1 }, { i: 6, j: 4 },  ], css_id: 'tinytable_css_ilg84mzwxzbef167wxip',}, \n          { positions: [ { i: 1, j: 1 }, { i: 5, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 9, j: 1 }, { i: 7, j: 2 }, { i: 7, j: 1 }, { i: 8, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 3, j: 2 }, { i: 4, j: 2 }, { i: 5, j: 2 }, { i: 7, j: 3 }, { i: 8, j: 3 }, { i: 8, j: 2 }, { i: 9, j: 2 }, { i: 10, j: 2 }, { i: 10, j: 1 }, { i: 1, j: 4 }, { i: 1, j: 3 }, { i: 2, j: 3 }, { i: 3, j: 3 }, { i: 4, j: 3 }, { i: 5, j: 3 }, { i: 7, j: 4 }, { i: 8, j: 4 }, { i: 9, j: 4 }, { i: 9, j: 3 }, { i: 10, j: 3 }, { i: 3, j: 4 }, { i: 4, j: 4 }, { i: 5, j: 4 }, { i: 2, j: 4 }, { i: 10, j: 4 },  ], css_id: 'tinytable_css_gibr2hxz2ea6x7gbrrpu',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 4 }, { i: 0, j: 3 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_nvtfuebibv91aaiesahu',}, \n          { positions: [ { i: 11, j: 0 },  ], css_id: 'tinytable_css_tzcxsor5ubiqrxorwudp',}, \n          { positions: [ { i: 6, j: 0 },  ], css_id: 'tinytable_css_nrbzo2xklzp80zhw4jwf',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 10, j: 0 }, { i: 7, j: 0 }, { i: 8, j: 0 }, { i: 9, j: 0 },  ], css_id: 'tinytable_css_6lkjrlosg12pgo3zszex',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_x7orbfekxourq19hx02p',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_l07bg203667rjxi480xh(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_k2c75sbx358qcix8myrg, .table th.tinytable_css_k2c75sbx358qcix8myrg { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_ilg84mzwxzbef167wxip, .table th.tinytable_css_ilg84mzwxzbef167wxip { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_gibr2hxz2ea6x7gbrrpu, .table th.tinytable_css_gibr2hxz2ea6x7gbrrpu { text-align: center; }\n      .table td.tinytable_css_nvtfuebibv91aaiesahu, .table th.tinytable_css_nvtfuebibv91aaiesahu { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_tzcxsor5ubiqrxorwudp, .table th.tinytable_css_tzcxsor5ubiqrxorwudp { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_nrbzo2xklzp80zhw4jwf, .table th.tinytable_css_nrbzo2xklzp80zhw4jwf { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_6lkjrlosg12pgo3zszex, .table th.tinytable_css_6lkjrlosg12pgo3zszex { text-align: left; }\n      .table td.tinytable_css_x7orbfekxourq19hx02p, .table th.tinytable_css_x7orbfekxourq19hx02p { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_l07bg203667rjxi480xh\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">(1)</th>\n                <th scope=\"col\">(2)</th>\n                <th scope=\"col\">(3)</th>\n                <th scope=\"col\">(4)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>811.753</td>\n                  <td>811.753</td>\n                  <td>811.753</td>\n                  <td>811.753</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(354.363)</td>\n                  <td>(171.599)</td>\n                  <td>(171.543)</td>\n                  <td>(171.520)</td>\n                </tr>\n                <tr>\n                  <td>palter</td>\n                  <td>24.640</td>\n                  <td>24.640</td>\n                  <td>24.640</td>\n                  <td>24.640</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(17.071)</td>\n                  <td>(8.923)</td>\n                  <td>(8.920)</td>\n                  <td>(8.919)</td>\n                </tr>\n                <tr>\n                  <td>I(palter^2)</td>\n                  <td>-0.147</td>\n                  <td>-0.147</td>\n                  <td>-0.147</td>\n                  <td>-0.147</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.197)</td>\n                  <td>(0.112)</td>\n                  <td>(0.112)</td>\n                  <td>(0.112)</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>7996</td>\n                  <td>7996</td>\n                  <td>7996</td>\n                  <td>7996</td>\n                </tr>\n                <tr>\n                  <td>R2</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                </tr>\n                <tr>\n                  <td>R2 Adj.</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                </tr>\n                <tr>\n                  <td>F</td>\n                  <td>15.525</td>\n                  <td>23.449</td>\n                  <td>23.441</td>\n                  <td>23.440</td>\n                </tr>\n                <tr>\n                  <td>Std.Errors</td>\n                  <td>IID</td>\n                  <td>HC</td>\n                  <td>HC2</td>\n                  <td>HC1</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\nFor clustered SEs, we specify `~clustervariable`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelsummary(mod1, vcov = c(\"classical\",~pnr), stars = T,gof_omit = \"RM|IC|Log|F\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_nieu7613crljsirzw0ok(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_nieu7613crljsirzw0ok\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_nieu7613crljsirzw0ok');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_nieu7613crljsirzw0ok(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_nieu7613crljsirzw0ok\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 10, j: 1 }, { i: 10, j: 2 },  ], css_id: 'tinytable_css_jqoryyz4va4ga3x26ppu',}, \n          { positions: [ { i: 6, j: 1 }, { i: 6, j: 2 },  ], css_id: 'tinytable_css_d0eypmf2mbvrb1gn7oqn',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 4, j: 1 }, { i: 5, j: 1 }, { i: 3, j: 2 }, { i: 3, j: 1 }, { i: 8, j: 1 }, { i: 9, j: 1 }, { i: 7, j: 2 }, { i: 7, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 }, { i: 4, j: 2 }, { i: 5, j: 2 }, { i: 8, j: 2 }, { i: 9, j: 2 },  ], css_id: 'tinytable_css_ef8cm15eot3kgxoora01',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_ftuhebinm4hvuii6xdr6',}, \n          { positions: [ { i: 10, j: 0 },  ], css_id: 'tinytable_css_ruzbhcl95w5qsqyta3xb',}, \n          { positions: [ { i: 6, j: 0 },  ], css_id: 'tinytable_css_006699eantotebzibpcn',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 7, j: 0 }, { i: 8, j: 0 }, { i: 9, j: 0 },  ], css_id: 'tinytable_css_e12iuvsap8zo4ph2gn7e',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_hxh01r370yw8i0j8vy34',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_nieu7613crljsirzw0ok(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_jqoryyz4va4ga3x26ppu, .table th.tinytable_css_jqoryyz4va4ga3x26ppu { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_d0eypmf2mbvrb1gn7oqn, .table th.tinytable_css_d0eypmf2mbvrb1gn7oqn { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_ef8cm15eot3kgxoora01, .table th.tinytable_css_ef8cm15eot3kgxoora01 { text-align: center; }\n      .table td.tinytable_css_ftuhebinm4hvuii6xdr6, .table th.tinytable_css_ftuhebinm4hvuii6xdr6 { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_ruzbhcl95w5qsqyta3xb, .table th.tinytable_css_ruzbhcl95w5qsqyta3xb { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_006699eantotebzibpcn, .table th.tinytable_css_006699eantotebzibpcn { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_e12iuvsap8zo4ph2gn7e, .table th.tinytable_css_e12iuvsap8zo4ph2gn7e { text-align: left; }\n      .table td.tinytable_css_hxh01r370yw8i0j8vy34, .table th.tinytable_css_hxh01r370yw8i0j8vy34 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_nieu7613crljsirzw0ok\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">(1)</th>\n                <th scope=\"col\">(2)</th>\n              </tr>\n        </thead>\n        <tfoot><tr><td colspan='3'>+ p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001</td></tr></tfoot>\n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>811.753*</td>\n                  <td>811.753**</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(354.363)</td>\n                  <td>(274.972)</td>\n                </tr>\n                <tr>\n                  <td>palter</td>\n                  <td>24.640</td>\n                  <td>24.640+</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(17.071)</td>\n                  <td>(14.475)</td>\n                </tr>\n                <tr>\n                  <td>I(palter^2)</td>\n                  <td>-0.147</td>\n                  <td>-0.147</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.197)</td>\n                  <td>(0.185)</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>7996</td>\n                  <td>7996</td>\n                </tr>\n                <tr>\n                  <td>R2</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                </tr>\n                <tr>\n                  <td>R2 Adj.</td>\n                  <td>0.004</td>\n                  <td>0.004</td>\n                </tr>\n                <tr>\n                  <td>Std.Errors</td>\n                  <td>IID</td>\n                  <td>by: pnr</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n## Fixed Effects Models with `{fixest}` {#fe}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfdz_install(\"fixest\")\n```\n:::\n\n\n\n\n[`{fixest}`](https://lrberge.github.io/fixest)) offers a wide range of options: [logistic FE models](#10_log_reg.qmd##feglm), multi-dimensional fixed effects, multiway clustering, etc. \nAnd it is very fast, [e.g., faster](https://lrberge.github.io/fixest/#benchmarking) than Stataâ€™s `reghdfe`. \nFor more details, the [vignette](https://lrberge.github.io/fixest/articles/fixest_walkthrough.html) is recommended.\n\nThe central function for estimating linear FE regression models is `feols()` - it works very similarly to `lm()`. \nWe provide a formula following the pattern `dependent variable ~ independent variable(s)`. \nWe simply add the variable that specifies the FEs with `|`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fixest)\nfe_mod1 <- feols(netges ~ palter + I(palter^2) | pnr, data = pend)\nfe_mod1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOLS estimation, Dep. Var.: netges\nObservations: 7,996\nFixed-effects: pnr: 2,444\nStandard-errors: Clustered (pnr) \n              Estimate Std. Error  t value   Pr(>|t|)    \npalter      133.811281  14.558248  9.19144  < 2.2e-16 ***\nI(palter^2)  -0.848429   0.154417 -5.49441 4.3261e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nRMSE: 1,222.2     Adj. R2: 0.513287\n                Within R2: 0.009765\n```\n\n\n:::\n:::\n\n\n\n\n`{fixest}` automatically clusters the standard errors along the FE variable (here `pnr`).\nIf we donâ€™t want that, we can request unclustered SEs with the `se` option `= \"standard\"`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(fe_mod1, se = 'standard')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOLS estimation, Dep. Var.: netges\nObservations: 7,996\nFixed-effects: pnr: 2,444\nStandard-errors: IID \n              Estimate Std. Error  t value   Pr(>|t|)    \npalter      133.811281  39.896986  3.35392 0.00080209 ***\nI(palter^2)  -0.848429   0.429629 -1.97479 0.04834109 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nRMSE: 1,222.2     Adj. R2: 0.513287\n                Within R2: 0.009765\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(fe_mod1, cluster = ~pnr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOLS estimation, Dep. Var.: netges\nObservations: 7,996\nFixed-effects: pnr: 2,444\nStandard-errors: Clustered (pnr) \n              Estimate Std. Error  t value   Pr(>|t|)    \npalter      133.811281  14.558248  9.19144  < 2.2e-16 ***\nI(palter^2)  -0.848429   0.154417 -5.49441 4.3261e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nRMSE: 1,222.2     Adj. R2: 0.513287\n                Within R2: 0.009765\n```\n\n\n:::\n:::\n\n\n\n\n`{modelsummary}` shows the clustered SEs:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelsummary(fe_mod1,gof_omit = \"R|IC|Log|F\",stars = T)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_fj8e50t10mgo4yya07jj(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_fj8e50t10mgo4yya07jj\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_fj8e50t10mgo4yya07jj');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_fj8e50t10mgo4yya07jj(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_fj8e50t10mgo4yya07jj\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 6, j: 1 },  ], css_id: 'tinytable_css_e46x9q3s939c3g7v2oya',}, \n          { positions: [ { i: 4, j: 1 },  ], css_id: 'tinytable_css_oagxe44d1jp57tbfia88',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 5, j: 1 },  ], css_id: 'tinytable_css_7ldpgab2iq6q3y7qt8w2',}, \n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_910zr0d91p3og77qccfg',}, \n          { positions: [ { i: 6, j: 0 },  ], css_id: 'tinytable_css_ykl3qgd8u2gm2zehvoxo',}, \n          { positions: [ { i: 4, j: 0 },  ], css_id: 'tinytable_css_2z4op46zw7rril3dogvh',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 5, j: 0 },  ], css_id: 'tinytable_css_7c5a0p8l9ll5elx14dtz',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_i6k0frsi5ao3hajdm9t6',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_fj8e50t10mgo4yya07jj(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_e46x9q3s939c3g7v2oya, .table th.tinytable_css_e46x9q3s939c3g7v2oya { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_oagxe44d1jp57tbfia88, .table th.tinytable_css_oagxe44d1jp57tbfia88 { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_7ldpgab2iq6q3y7qt8w2, .table th.tinytable_css_7ldpgab2iq6q3y7qt8w2 { text-align: center; }\n      .table td.tinytable_css_910zr0d91p3og77qccfg, .table th.tinytable_css_910zr0d91p3og77qccfg { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_ykl3qgd8u2gm2zehvoxo, .table th.tinytable_css_ykl3qgd8u2gm2zehvoxo { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_2z4op46zw7rril3dogvh, .table th.tinytable_css_2z4op46zw7rril3dogvh { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_7c5a0p8l9ll5elx14dtz, .table th.tinytable_css_7c5a0p8l9ll5elx14dtz { text-align: left; }\n      .table td.tinytable_css_i6k0frsi5ao3hajdm9t6, .table th.tinytable_css_i6k0frsi5ao3hajdm9t6 { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_fj8e50t10mgo4yya07jj\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">(1)</th>\n              </tr>\n        </thead>\n        <tfoot><tr><td colspan='2'>+ p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001</td></tr></tfoot>\n        <tbody>\n                <tr>\n                  <td>palter</td>\n                  <td>133.811***</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(14.558)</td>\n                </tr>\n                <tr>\n                  <td>I(palter^2)</td>\n                  <td>-0.848***</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.154)</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>7996</td>\n                </tr>\n                <tr>\n                  <td>Std.Errors</td>\n                  <td>by: pnr</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n## Multilevel Models with `{lme4}` {#mlvl}\n\nWith `lmer()`, we can estimate a random intercept model by specifying `( 1 | pnr)`, which indicates that a separate random intercept should be calculated for each `pnr`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\nml_m3 <- lmer(netges ~ palter + I(palter^2) + ( 1 | pnr), data=pend)\n\nmodelsummary(list(ml_m3),gof_omit = \"R|IC|Log|F\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_bhl305ie9yjbd8ml4ocu(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_bhl305ie9yjbd8ml4ocu\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_bhl305ie9yjbd8ml4ocu');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_bhl305ie9yjbd8ml4ocu(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_bhl305ie9yjbd8ml4ocu\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 9, j: 1 },  ], css_id: 'tinytable_css_urxmmfjgqgvtbyv5rf1t',}, \n          { positions: [ { i: 8, j: 1 },  ], css_id: 'tinytable_css_pwh68np69t4c2jt7r3r5',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 3, j: 1 }, { i: 4, j: 1 }, { i: 5, j: 1 }, { i: 6, j: 1 }, { i: 7, j: 1 },  ], css_id: 'tinytable_css_tgbw42lkaduh7r9r7fm7',}, \n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_ojcoor5h2ado7ue0audp',}, \n          { positions: [ { i: 9, j: 0 },  ], css_id: 'tinytable_css_1qxkm8dfpasqjofar6nk',}, \n          { positions: [ { i: 8, j: 0 },  ], css_id: 'tinytable_css_bine8lp029r9uwbpivo9',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 }, { i: 3, j: 0 }, { i: 4, j: 0 }, { i: 5, j: 0 }, { i: 6, j: 0 }, { i: 7, j: 0 },  ], css_id: 'tinytable_css_84hjixbfbcyrj0il5ptv',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_bq5xh0hzvy52aaukhvri',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_bhl305ie9yjbd8ml4ocu(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_urxmmfjgqgvtbyv5rf1t, .table th.tinytable_css_urxmmfjgqgvtbyv5rf1t { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_pwh68np69t4c2jt7r3r5, .table th.tinytable_css_pwh68np69t4c2jt7r3r5 { text-align: center; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_tgbw42lkaduh7r9r7fm7, .table th.tinytable_css_tgbw42lkaduh7r9r7fm7 { text-align: center; }\n      .table td.tinytable_css_ojcoor5h2ado7ue0audp, .table th.tinytable_css_ojcoor5h2ado7ue0audp { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_1qxkm8dfpasqjofar6nk, .table th.tinytable_css_1qxkm8dfpasqjofar6nk { text-align: left; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_bine8lp029r9uwbpivo9, .table th.tinytable_css_bine8lp029r9uwbpivo9 { text-align: left; border-bottom: solid black 0.05em; }\n      .table td.tinytable_css_84hjixbfbcyrj0il5ptv, .table th.tinytable_css_84hjixbfbcyrj0il5ptv { text-align: left; }\n      .table td.tinytable_css_bq5xh0hzvy52aaukhvri, .table th.tinytable_css_bq5xh0hzvy52aaukhvri { text-align: left; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_bhl305ie9yjbd8ml4ocu\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">(1)</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>(Intercept)</td>\n                  <td>754.388</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(392.459)</td>\n                </tr>\n                <tr>\n                  <td>palter</td>\n                  <td>18.523</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(19.083)</td>\n                </tr>\n                <tr>\n                  <td>I(palter^2)</td>\n                  <td>-0.020</td>\n                </tr>\n                <tr>\n                  <td></td>\n                  <td>(0.222)</td>\n                </tr>\n                <tr>\n                  <td>SD (Intercept pnr)</td>\n                  <td>1327.674</td>\n                </tr>\n                <tr>\n                  <td>SD (Observations)</td>\n                  <td>1414.455</td>\n                </tr>\n                <tr>\n                  <td>Num.Obs.</td>\n                  <td>7996</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\nMore about multilevel models and `{lme4}` in blog posts by [Rense Nieuwenhuis](http://www.rensenieuwenhuis.nl/r-sessions-16-multilevel-model-specification-lme4/) and [Tristan Mahr](https://www.tjmahr.com/plotting-partial-pooling-in-mixed-effects-models/).\n\n<!-- ## Final Remarks -->\n\n<!-- In summary, `{fixest}` and `{modelsummary}` allow us to adjust standard errors after the actual model estimation by using the `se` or `cluster` options.  -->\n\n<!-- A [blog post by Grant Mcdermott](https://grantmcdermott.com/better-way-adjust-SEs/) argues in more detail why post-estimation calculation of standard errors (instead of a complete re-estimation of the model) is a good idea - even though it is a very unusual approach for Stata users. -->\n\n<!-- Exact replication of standard errors from other programs (e.g., Stata) is often more difficult than it initially seems.  -->\n<!-- See also the discussion [here](https://github.com/sgaure/lfe/issues/1#issuecomment-530643808)  -->\n<!-- [Detailed vignette](https://lrberge.github.io/fixest/articles/standard_errors.html) on how SEs from other programs can be replicated. -->\n<!-- [Detailed paper](http://sandwich.r-forge.r-project.org/articles/jss_2020.html) by the authors of `{sandwich}` on this topic. -->\n\n<!-- ## Appendix: Predictions with `marginaleffects` and \"Manual\" Visualization {#marginsplot} -->\n\n\n## Links\n\n[How to interpret statistical models in R using `{marginaleffects}`](https://marginaleffects.com/) - deep dive into the background of marginal effects, predictions, adjusted predictions, elasticities, ... and how you can fit them using R. Fans of Stata's `margins` should take a look at [a special chapter comparing margins to marginaleffects](https://marginaleffects.com/vignettes/alternative_software.html#stata)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}