{
  "hash": "9d8a29c5f660c83705d6b83705a32eed",
  "result": {
    "engine": "knitr",
    "markdown": "# Links & Further Reading {.unnumbered}\n\n\n\n\n\n\n\n\n\n## `%>%` vs. `|>`\n\nIn this course, we have used the pipe `%>%` from `{tidyverse}` (technically from the `{magrittr}` package). With the update to R 4.1, a pipe `|>` was also introduced in base R, and help pages and other resources are slowly but surely replacing `%>%` with `|>`. For (almost) all applications we've learned, both pipes behave identically. Since older R versions are still installed at the IAB, we have stuck to the 'old version'. However, there's nothing wrong with switching to `|>` after an update—or simply sticking with `%>%`.\n\n![](./pic/pipe.png){width=\"490\"}\n\nYou can find more about the differences [here](https://r4ds.hadley.nz/workflow-pipes.html#vs) between the two pipes.\nAdditionally, [this blog post](https://kpress.dev/blog/2022-06-19-replacing-the-magrittr-pipe-with-native-r-pipe/) offers a good overview of the pitfalls when switching from `%>%` to `|>`.\n\n## Anonymous Functions: `.x` vs. `\\(x)` {#anonymfun}\n\nWith [R 4.1.0](https://towardsdatascience.com/the-new-pipe-and-anonymous-function-syntax-in-r-54d98861014c), a new 'anonymous function shorthand' was introduced in base R, replacing the 'formula syntax' notation `~mean(.x)` that we learned in [Chapter 6](#06_data_wrangle2). In the new base R, it would be written as `\\(x) mean(x)`.\n\nFrom the [`{purrr}` release notes for version 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/#documentation) (December 2022):\n*We believe that it’s better to use these new base tools because they work everywhere: the base pipe doesn’t require that you load magrittr and the new function shorthand works everywhere, not just in purrr functions. Additionally, being able to specify the argument name for the anonymous function can often lead to clearer code.*\n\nAccordingly, the application in `across()` would look like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small <- haven::read_dta(\"./data/BIBBBAuA_2018_suf1.0.dta\",n_max = 16) %>% \n    select(F1450_04,F1450_05,F1450_06) %>% \n    slice(12:16)\n\n# formula syntax\nsat_small %>% \n  mutate(across(matches(\"F1450\"), ~mean(.x)))\n# anonymous function shorthand\nsat_small %>% \n  mutate(across(matches(\"F1450\"), \\(x) mean(x) ))\n```\n:::\n\n\n\n\nIn this script, I have relied on the previous 'formula syntax' notation, as most help pages currently still use this syntax.\n\n## Introductions to R\n\nA collection of teaching scripts and materials from various contexts for self-learning:\n\n[R for Data Science](https://r4ds.had.co.nz/) **the** standard work for data analysis with `{tidyverse}` - very intuitive introduction, focus on Data Science.\n\n[Problem-oriented introductions to specific applications \"do more with R\"](https://www.infoworld.com/article/3411819/do-more-with-r-video-tutorials.html).\n\n[Ten simple rules for teaching yourself R](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1010372).\n\n[Modern Data Analysis with R](https://link.springer.com/book/10.1007/978-3-658-21587-3): A German-language introduction to `{tidyverse}`.\n\n[R for the Rest of Us](https://rfortherestofus.com/) offers many tutorials and free courses, including many [YouTube](https://www.youtube.com/channel/UCSoUNu8x-HblqqOK_EwdZGw) videos.\n\n[Stata 2 R](https://stata2r.github.io/) is aimed at Stata users who want to switch to R. However, it shows the `{data.table}` package for data processing instead of `{tidyverse}`. `{data.table}` is very fast but has a somewhat more cumbersome syntax compared to `{tidyverse}`. For those working with very large datasets, it's worth trying out `{data.table}`.\n\n## RMarkdown\n\n[{rmarkdown}](https://rmarkdown.rstudio.com/) allows you to combine formatted text elements with [Markdown](https://www.markdownguide.org/cheat-sheet/) and R code or output. Unlike an R script, an RMarkdown document contains not only commands but also text that can be formatted using [Markdown](https://www.markdownguide.org/cheat-sheet/) commands. This way, graphics, tables, etc., can be created directly alongside the accompanying text. With R Markdown, we can create HTML, PDF, Word documents, PowerPoint and HTML presentations, websites, and books. This entire website was created with [{R Markdown}](https://bookdown.org/yihui/rmarkdown-cookbook/) or the related package [{Quarto}](www.quarto.org/).\n\nThe [help pages and documentation for R Markdown](https://rmarkdown.rstudio.com/) are extensive, and the [tutorials](https://rmarkdown.rstudio.com/lesson-1.html) and [cheatsheets](https://rmarkdown.rstudio.com/lesson-15.html) are excellent. Therefore, here's just a brief overview.\n\n### Markdown Syntax\n\nAn RMarkdown document in its basic form looks something like this:\n\n\n\n\n\n````{.markdown}\n---\ntitle: \"My First RMarkdown Document\"\nauthor: \"My Name\"\ndate: \"2022-09-11\"\noutput: pdf_document\n---\n  \n# Heading 1\n\n## Subheading 2\n\nThis is an R Markdown document. \nMarkdown is a simple syntax for creating HTML, PDF, and MS Word documents. \nText can be **bold** and *italic*. \n\nWhen we click the **Knit** button, a document is created.\nThat contains both the content and the output of any embedded R code chunks within the document. \nAn R code chunk looks like this:\n\n```{r cars}\n# this is where the R code goes\nsummary(mtcars$qsec)\n```\n\n````\n\n::: {.cell}\n::: {.cell-output-display}\n![](./pic/115_rmd_demo.png){width=75%}\n:::\n:::\n\n\n\n\n### Example\n\n[Paper on a sample dataset, written entirely in R Markdown](https://allisonhorst.github.io/penguins_paper_distill/rjarticle/penguins.html)  \n\n[You can find the source code here](https://github.com/allisonhorst/penguins_paper_distill/blob/46342ebf450dfdb49741ae9f7059c6e3c266af70/rjarticle/penguins.Rmd).\n\n## Cheatsheets\n\nA collection of cheatsheets for a wide range of applications is available [here](https://www.rstudio.com/resources/cheatsheets/).\n\n+ Data visualization with [`{ggplot2}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf).\n+ Data manipulation with [`{dplyr}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf).\n+ Reshaping/creating datasets with [`{tidyr}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf).\n\n## `{ggplot2}`\n\nA significant strength of `ggplot2` is the numerous extensions that allow you to\n\n+ Combine multiple plots with [`{patchwork}`](https://github.com/thomasp85/patchwork#patchwork).\n+ Create maps with [sf](https://oliviergimenez.github.io/intro_spatialR/#1), another [link](https://ourcodingclub.github.io/tutorials/dataviz-beautification-synthesis/).\n+ Use advanced text formatting with [`{ggtext}`](https://wilkelab.org/ggtext/).\n+ Create animated graphics with [`{gganimate}`](https://gganimate.com/) - [an introduction](https://goodekat.github.io/presentations/2019-isugg-gganimate-spooky/slides.html) or [here](https://rpubs.com/bradyrippon/929572).\n+ Insert logos into `{ggplot2}` with [`{ggpath}`](https://mrcaseb.github.io/ggpath/).\n\nAn overview of extension packages for `{ggplot2}` can be found [here](https://exts.ggplot2.tidyverse.org/gallery/).\n\nAlso, [The R Graph Gallery](https://r-graph-gallery.com/) provides an excellent overview of visualization possibilities with syntax examples for `{ggplot2}`.\n\n+ [Tutorial by Cédric Scherer](https://cedricscherer.netlify.app/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/).\n\n+ [Session on more intuitive graphics by Cara Thompson](https://www.youtube.com/watch?v=_indbXPXUw8).\n\n## Advanced use of `lapply()`/`map()` with custom functions {#purrr}\n\n+ Comprehensive introduction to loops with `map()` and other functions from `{purrr}` [Hendrik van Broekhuizen](https://hendrikvanb.gitlab.io/slides/purrr_beyond_map.html#1).\n+ Model series: [Blog by Tim Tiefenbach](https://tim-tiefenbach.de/post/2023-dplyr-many-models/) on elegant possibilities.\n\n## regex\n\nFor working with text variables, *regular expressions* (regex) are a great help. \nThey allow you to search for specific character sequences in text sections, replace them, etc.\nJoshua C. Fjelstul's [blog](https://jfjelstul.github.io/regular-expressions-tutorial/) is a good starting point.\nThere's also a helpful cheatsheet for [*regex* in R](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf) and the *regex* package [`{stringr}`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf).\n\n## Further Resources\n\n[`{easystats}`](https://github.com/easystats/easystats#easystats-framework-for-easy-statistical-modeling-visualization-and-reporting) offers a collection of packages that make statistical analysis easier and more unified. However, this unification comes with somewhat limited flexibility—it's a matter of taste and depends on the application. We have used `{performance}` and `{effectsize}` from the `easystats` universe.\n\n[Event History Models / Event History Modeling / Survival Analysis](https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}