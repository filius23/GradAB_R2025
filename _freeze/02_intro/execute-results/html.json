{
  "hash": "b2f8eba5c90cfda20adb18d92b2de28f",
  "result": {
    "engine": "knitr",
    "markdown": "# Working with Datasets\n\n\n\n\n\n\n\n\n\n\n\n**(Late) Foreword on R and Command Structure**\n\n::: callout-note\n#\n\n1. Everything is an object.\n2. Everything has a name.\n3. Everything we do is based on functions.\n4. Functions come from \"packages\"[^pkg], but we will also write our own functions.\n\n[^pkg]: In many other programming languages, these are called libraries.\n\nPoints 1 and 2 are referred to as [Object-Oriented Programming (OOP)](https://en.wikipedia.org/wiki/Object-oriented_programming). In this course, we will learn object-oriented programming.\n:::\n\nSounds good, right?\n\n- Functions are (almost) always verbs followed by parentheses, e.g., `colnames()`, where the object to be processed is specified. This can be a variable or a dataset.\n- Options may also be specified within the parentheses—for example, the command to read `.dta` files is `read_dta(datensatz.dta, n_max = 100)`.\n- Line breaks are ignored by R, meaning we can write a command over multiple lines for better readability:\n  \n\n\n\n\n  ::: {.cell}\n  \n  ```{.r .cell-code}\n  function(object_name1,\n           option1 = very_long_choice,\n           option2 = another_choice)\n  ```\n  :::\n\n\n\n\n\n- If we execute a function with `function(object_name, option1 = TRUE, option2 = FALSE)`, the result is displayed in the console.\n- If the result of a calculation or operation is not only to be displayed but retained for further steps, it must be stored under `name <- ...`. The original object remains unchanged unless we explicitly overwrite it with `name <- function(name)`. Here in the script, I often omit this step to see results directly, but to work with previous operations, we need to store them in R under an object name.\n- Options within `()` can also be specified based on the order.\n- The help for a function can be accessed with `?function()`, e.g., `?colnames()`.\n\nSome general aspects where working with R differs from other programs:\n\n- ~~R does not necessarily stop at a syntax error but tries to execute the remaining commands. *However:* RStudio stops with a syntax error from version [2022.07](https://stackoverflow.com/questions/73567974/how-to-make-r-by-default-not-stopping-when-an-error-is-encountered-while-running/73641357#73641357) onwards.~~\n\n- For Stata users: no more `variable xyz already defined`. We can overwrite anything without `, replace`, or similar commands.\n\n- Due to object orientation, we can have multiple datasets open simultaneously, increasing flexibility.\n\nIn the first session, we did some steps with R's calculator function. However, R's real strength lies in data processing—so let's get started.\n\n## Data Structures in R: `data.frame`\n\nIn the previous chapter, we combined the student numbers of the University of Bremen (19173), University of Vechta (5333), and University of Oldenburg (15643) under `studs` and related them to the professor numbers stored in `profs`. While this works fine, it is more organized to store related values together. For this, R provides the `data.frame`. We can store the two objects in a dataset by entering them into `data.frame` and storing the new object under `dat1`. When we call `dat1`, we see that the values have been combined row by row:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstuds <- c(19173, 5333, 15643)  # Store student numbers under \"studs\"\nprofs <- c(322, 67, 210)        # Store professor numbers under \"profs\"\ndat1_orig <- data.frame(studs, profs)\ndat1_orig\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs\n1 19173   322\n2  5333    67\n3 15643   210\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- data.frame(studs = c(19173, 5333, 15643), \n                   profs = c(322, 67, 210),\n                   gegr  = c(1971, 1830, 1973)) # Without intermediate objects\ndat1    # Display the entire dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr\n1 19173   322 1971\n2  5333    67 1830\n3 15643   210 1973\n```\n\n\n:::\n:::\n\n\n\n\n\nIn the first row, we see the values for the University of Bremen, in the second row for the University of Vechta, and so on. We can access the columns using `dataset_name$variable_name`. For example, we can display the `profs` column:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$profs \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 322  67 210\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can display the variable/column names of the dataset with `colnames()`/`names()`. Additionally, we can call the number of rows and columns using `nrow` and `ncol`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(dat1) ## Display variable/column names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"studs\" \"profs\" \"gegr\" \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(dat1) ## Display variable/column names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"studs\" \"profs\" \"gegr\" \n```\n\n\n:::\n\n```{.r .cell-code}\nncol(dat1) ## Number of columns/variables\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(dat1) ## Number of rows/cases\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can add new variables to the dataset by using `dataset_name$new_variable`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$stu_prof <- dat1$studs/dat1$profs\n## dat1 now has one more column:\nncol(dat1) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof\n1 19173   322 1971 59.54348\n2  5333    67 1830 79.59701\n3 15643   210 1973 74.49048\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can also store one or more words in a variable, but letters/words must always be enclosed in `\"\"`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$uni <- c(\"Uni Bremen\", \"Uni Vechta\", \"Uni Oldenburg\")\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni\n1 19173   322 1971 59.54348    Uni Bremen\n2  5333    67 1830 79.59701    Uni Vechta\n3 15643   210 1973 74.49048 Uni Oldenburg\n```\n\n\n:::\n:::\n\n\n\n\n\nWith `View(dat1)`, a new window opens where we can view the entire dataset:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(dat1)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/102_View.png){fig-align='center' width=45% height=35%}\n:::\n:::\n\n\n\n\n\n## Data Types in R\n\nSo far, we have encountered two variable types: numeric (contains numbers) and character (contains text or numbers that are understood as text). We also learned an organization method: `data.frame`.\n\nThe following variable types in R are important for us:[^vec_types]\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"znqlliunow\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#znqlliunow table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#znqlliunow thead, #znqlliunow tbody, #znqlliunow tfoot, #znqlliunow tr, #znqlliunow td, #znqlliunow th {\n  border-style: none;\n}\n\n#znqlliunow p {\n  margin: 0;\n  padding: 0;\n}\n\n#znqlliunow .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#znqlliunow .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#znqlliunow .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#znqlliunow .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#znqlliunow .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#znqlliunow .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#znqlliunow .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#znqlliunow .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#znqlliunow .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#znqlliunow .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#znqlliunow .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#znqlliunow .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#znqlliunow .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#znqlliunow .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#znqlliunow .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#znqlliunow .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#znqlliunow .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#znqlliunow .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#znqlliunow .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#znqlliunow .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#znqlliunow .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#znqlliunow .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#znqlliunow .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#znqlliunow .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#znqlliunow .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#znqlliunow .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#znqlliunow .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#znqlliunow .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#znqlliunow .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#znqlliunow .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#znqlliunow .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#znqlliunow .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#znqlliunow .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#znqlliunow .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#znqlliunow .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#znqlliunow .gt_left {\n  text-align: left;\n}\n\n#znqlliunow .gt_center {\n  text-align: center;\n}\n\n#znqlliunow .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#znqlliunow .gt_font_normal {\n  font-weight: normal;\n}\n\n#znqlliunow .gt_font_bold {\n  font-weight: bold;\n}\n\n#znqlliunow .gt_font_italic {\n  font-style: italic;\n}\n\n#znqlliunow .gt_super {\n  font-size: 65%;\n}\n\n#znqlliunow .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#znqlliunow .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#znqlliunow .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#znqlliunow .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#znqlliunow .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#znqlliunow .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#znqlliunow .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#znqlliunow .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#znqlliunow div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style><span data-qmd-base64=\"VmVjdG9ycyAoVmFyaWFibGVzKQ==\"><span class='gt_from_md'>Vectors (Variables)</span></span></td>\n    </tr>\n    \n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"class\" class=\"gt_row gt_left\"><span data-qmd-base64=\"aW50ZWdlciA8YnI+IGRvdWJsZQ==\"><span class='gt_from_md'>integer <br> double</span></span></td>\n<td headers=\"Description\" class=\"gt_row gt_left\"><span data-qmd-base64=\"TnVtZXJpYyB2YWx1ZXMgKGBudW1lcmljYCk=\"><span class='gt_from_md'>Numeric values (<code>numeric</code>)</span></span></td></tr>\n    <tr><td headers=\"class\" class=\"gt_row gt_left\"><span data-qmd-base64=\"Y2hhcmFjdGVy\"><span class='gt_from_md'>character</span></span></td>\n<td headers=\"Description\" class=\"gt_row gt_left\"><span data-qmd-base64=\"VGV4dCAob3IgbnVtYmVycyB1bmRlcnN0b29kIGFzIHRleHQp\"><span class='gt_from_md'>Text (or numbers understood as text)</span></span></td></tr>\n    <tr><td headers=\"class\" class=\"gt_row gt_left\"><span data-qmd-base64=\"ZmFjdG9y\"><span class='gt_from_md'>factor</span></span></td>\n<td headers=\"Description\" class=\"gt_row gt_left\"><span data-qmd-base64=\"VGV4dCBvciBudW1iZXJzIHVuZGVyc3Rvb2QgYXMgdGV4dCB3aXRoIHByZWRlZmluZWQgc29ydGluZyBhbmQgZml4ZWQgdmFsdWUgdW5pdmVyc2U=\"><span class='gt_from_md'>Text or numbers understood as text with predefined sorting and fixed value universe</span></span></td></tr>\n    <tr><td headers=\"class\" class=\"gt_row gt_left\"><span data-qmd-base64=\"bG9naWNhbA==\"><span class='gt_from_md'>logical</span></span></td>\n<td headers=\"Description\" class=\"gt_row gt_left\"><span data-qmd-base64=\"YFRSVUVgIG9yIGBGQUxTRWDigJRtb3N0bHkgdGhlIHJlc3VsdCBvZiBhIGNvbXBhcmlzb24gKGdyZWF0ZXIvbGVzcy9lcXVhbCk=\"><span class='gt_from_md'><code>TRUE</code> or <code>FALSE</code>—mostly the result of a comparison (greater/less/equal)</span></span></td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"tpryrfshzb\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#tpryrfshzb table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#tpryrfshzb thead, #tpryrfshzb tbody, #tpryrfshzb tfoot, #tpryrfshzb tr, #tpryrfshzb td, #tpryrfshzb th {\n  border-style: none;\n}\n\n#tpryrfshzb p {\n  margin: 0;\n  padding: 0;\n}\n\n#tpryrfshzb .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#tpryrfshzb .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#tpryrfshzb .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#tpryrfshzb .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#tpryrfshzb .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#tpryrfshzb .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#tpryrfshzb .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#tpryrfshzb .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#tpryrfshzb .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#tpryrfshzb .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#tpryrfshzb .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#tpryrfshzb .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#tpryrfshzb .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#tpryrfshzb .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#tpryrfshzb .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tpryrfshzb .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#tpryrfshzb .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#tpryrfshzb .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#tpryrfshzb .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tpryrfshzb .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#tpryrfshzb .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tpryrfshzb .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#tpryrfshzb .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tpryrfshzb .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#tpryrfshzb .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#tpryrfshzb .gt_left {\n  text-align: left;\n}\n\n#tpryrfshzb .gt_center {\n  text-align: center;\n}\n\n#tpryrfshzb .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#tpryrfshzb .gt_font_normal {\n  font-weight: normal;\n}\n\n#tpryrfshzb .gt_font_bold {\n  font-weight: bold;\n}\n\n#tpryrfshzb .gt_font_italic {\n  font-style: italic;\n}\n\n#tpryrfshzb .gt_super {\n  font-size: 65%;\n}\n\n#tpryrfshzb .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#tpryrfshzb .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#tpryrfshzb .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#tpryrfshzb .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#tpryrfshzb .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#tpryrfshzb .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#tpryrfshzb .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#tpryrfshzb .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#tpryrfshzb div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style><span data-qmd-base64=\"Q29tYmluZWQgVmVjdG9ycw==\"><span class='gt_from_md'>Combined Vectors</span></span></td>\n    </tr>\n    \n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"class\" class=\"gt_row gt_left\"><span data-qmd-base64=\"ZGF0YS5mcmFtZSA8YnI+IHRpYmJsZQ==\"><span class='gt_from_md'>data.frame <br> tibble</span></span></td>\n<td headers=\"Description\" class=\"gt_row gt_left\"><span data-qmd-base64=\"VHdvLWRpbWVuc2lvbmFsIGRhdGEgc3RydWN0dXJlIG9yZ2FuaXplZCBpbiB0YWJ1bGFyIGZvcm3igJRgdGliYmxlYCBpcyBhbiBlbmhhbmNlbWVudCBvZiBgZGF0YS5mcmFtZWAgaW4gdGhlIHRpZHl2ZXJzZSAobW9yZSBvbiB0aGlzIFtsYXRlcl0oI3RpZHl2ZXJzZSkp\"><span class='gt_from_md'>Two-dimensional data structure organized in tabular form—<code>tibble</code> is an enhancement of <code>data.frame</code> in the tidyverse (more on this <a href=\"#tidyverse\">later</a>)</span></span></td></tr>\n    <tr><td headers=\"class\" class=\"gt_row gt_left\"><span data-qmd-base64=\"bGlzdA==\"><span class='gt_from_md'>list</span></span></td>\n<td headers=\"Description\" class=\"gt_row gt_left\"><span data-qmd-base64=\"T3JkZXJlZCBjb2xsZWN0aW9uIG9mIHZlY3RvcnMgb2YgZGlmZmVyZW50IHR5cGVz4oCUY2FuIGNvbnRhaW4gb3RoZXIgdmFsdWUgdHlwZXMsIGBkYXRhLmZyYW1lYCwgb3IgZXZlbiBvdGhlciBsaXN0cw==\"><span class='gt_from_md'>Ordered collection of vectors of different types—can contain other value types, <code>data.frame</code>, or even other lists</span></span></td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n\n[^vec_types]: There are more, and this enumeration ignores technical details—for an [advanced introduction to vectors in R, click here](https://r4ds.had.co.nz/vectors.html).\n\nFor now, we focus on character and numeric variables. We will discuss the other types when they are needed. With `class()`, we can examine the type of a variable, or with `is.numeric()` or `is.character()`, we can check whether a variable belongs to a certain type:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(dat1$profs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(dat1$uni)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can enforce a type change with `as.character()` or `as.numeric()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(dat1$profs) ## The \"\" indicate that the variable is defined as character\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"322\" \"67\"  \"210\"\n```\n\n\n:::\n:::\n\n\n\n\n\nThis does not change the original variable `dat1$profs`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(dat1$profs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\n\nIf we want to keep this conversion for `dat1$profs`, we need to overwrite the variable:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$profs <- as.character(dat1$profs)\nclass(dat1$profs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\nWe cannot perform calculations with `character` variables, even if they contain numbers:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$profs / 2 \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in dat1$profs/2: nicht-numerisches Argument für binären Operator\n```\n\n\n:::\n:::\n\n\n\n\n\nHowever, we can convert `dat1$profs` to numeric on the fly to perform calculations:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(dat1$profs) / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 161.0  33.5 105.0\n```\n\n\n:::\n:::\n\n\n\n\n\nIf we convert text variables to numeric, calculations result in `NA`.\n`NA` in R stands for missing values:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.numeric(dat1$uni)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: NAs durch Umwandlung erzeugt\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA NA NA\n```\n\n\n:::\n:::\n\n\n\n\n\nR, understandably, does not know how to convert university names into numbers.\n\n::: callout-tip\nA common issue in calculations is due to incorrect variable types.\n:::\n\n### [Exercise](#data1) {#ue_1}\n\n## Selecting Rows & Columns\n\nA typical task when working with datasets is selecting rows (\"cases\") and columns (\"variables\").\n\nFor this, R in its base version[^baseR] provides a selection method using `[]`. The basic structure is `[row_selection, column_selection]`. Leaving out the part before or after the comma selects all rows/columns. Be careful: forgetting the comma is a common source of errors in R.\n\n[^baseR]: We will see [soon](#packages) how packages can make working in R easier.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 # complete dataset\ndat1[1,1] # first row, first column\ndat1[1,]  # first row, all columns\ndat1[,1]  # all rows, first column (equivalent to dat1$studs)\ndat1[,\"studs\"] # all rows, column named studs -> note: \"\"\n```\n:::\n\n\n\n\n\nIn these square brackets, you can also write conditions to make selections from `dat1`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1[dat1$studs > 10000, ] # rows where studs is greater than 10000, all columns\ndat1[dat1$studs > 10000 & dat1$profs < 300, ] # & means AND\ndat1$profs[dat1$studs > 10000] # Only see the number of professors: no comma\n```\n:::\n\n\n\n\n\nRepetitive use of the dataset name in the `[]` makes the syntax quite long and somewhat tedious. Therefore, there is a better/more convenient solution.\nWe use the `{dplyr}` package[^04_intro-1].\n\n[^04_intro-1]: It has become common in the R community to write packages with `{}` to distinguish them more clearly from functions. I follow this convention in this script.\n\n\n\n\n## Packages in R {#packages}\n\nPackages are extensions for R that include additional functions, some might be familiar with Stata's ado files.\nPackages need to be installed once and then loaded before use in a new session (i.e., after every restart of R/RStudio). `install.packages()` performs the installation, and `library()` loads the packages:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"Package\") # only needed once on your PC\nlibrary(Package) # needed after every restart\n```\n:::\n\n\n\n\n\nOften, when using `install.packages()`, not only the specified package is downloaded but also a number of other packages, the so-called \"dependencies\". These are packages used in the background to enable the functions of the desired package. So don’t be surprised if the installation takes a bit longer.\n\nWith `install.packages()` we essentially screw in the light bulb in R, with `library()` we flip the switch so we can use the functions from the package. Each restart turns the light bulb off again, and we need to turn it back on with `library()`. The advantage is that we don’t have to turn on all the light bulbs at once when starting R.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Source: [Dianne Cook](https://twitter.com/visnut/status/1248087845589274624)](./pic/104_install-packages.jpg){fig-align='center' width=53% height=53%}\n:::\n:::\n\n\n\n\n\n### R packages on IAB Servers {#fdz_install}\n\n:::{.callout-caution}\n\nR Packages are typically installed from [CRAN](https://cran.r-project.org/web/packages/available_packages_by_name.html).\nHowever, this is not possible on the servers at IAB due to isolation from the internet.\nAs a result, package installation is restricted on IAB servers to the collection maintained by DIM at `N:/Ablagen/D01700-Allgemein/R/bin/windows/contrib/`.\n\nA central challenge in installing from local zip files is handling *dependencies*: packages that the desired package relies on.\nWhen installing from the internet, dependencies are automatically installed, but with a local installation, this is not the case.\n\nAt IAB, some workarounds exist, and currently, I have a solution in progress at FDZ based on a `.Rprofile` file that provides the `fdz_install()` command, which behaves like the standard `install.packages()` command (or should, at least).\n\nThe most recent version of the `.Rprofile` file can be found under `N:\\Ablagen\\D01700-Quickablage\\Filser\\2025-06_Rprofile.R`. Place the `.Rprofile` file in `C:\\Users\\*YOUR_USERNAME*\\Documents` and restart R (`CTRL + F10`), you should then see a similar message in the console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n----------------------------------------\nIAB-FDZ .Rprofile\nVersion 0.6\n----------------------------------------\n- Working directory:                   Z:/Eigene Dateien\n- Default package library:             Z:/R/4-4\n- HOME directory:                      C:\\Users\\FilserA001.IAB\\Documents\n- R_home directory:                    C:/PROGRA~1/R/R-4.4.0\n----------------------------------------\n```\n:::\n\n\n\n\n\nTo make matters more comfortable, you can run this code once to copy the .Rprofile from my Quickablage into your Documents folder on the server you're working on:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.copy(from = \"N:/Ablagen/D01700-Quickablage/Filser/2025-06_Rprofile.R\",\n          to   = paste0(\n                    dir(path = \"C:/Users/\",\n                        pattern = Sys.getenv(\"USERNAME\"), # find correct User-Folder on C:\n                        full.names = T),\n                    \"/Documents/.Rprofile\"\n                    )\n          )\n```\n:::\n\n\n\n\n\n[**How to use Rproj to ensure reproducibilty**](#reproducibility)\n\n<!-- [More about RProfile](https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf) -->\n\n:::\n\n:::{.callout-tip collapse=\"true\"}\n# Loading packages once {#pkgdoublecolon}\n\nIn addition to `library()`, you can also call functions from packages using `::`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackage::function()\n```\n:::\n\n\n\n\n\nThis option is often used when only one function from a package is used or to clarify which package the function comes from. It can also help with issues if a command from another package has the same name—this will override the previous command (usually with a warning), which might look like:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nThe following objects are masked from ‘package:dplyr’:\n\n    between, first, last\n\nThe following object is masked from ‘package:purrr’:\n\n    transpose\n```\n:::\n\n\n\n\n\nThis can be avoided by not fully loading certain packages but only calling the necessary functions with `::`.\n\n:::\n\n\n## `{tidyverse}` {#tidyverse}\n\nIn this course, we will mainly work with packages from the [`{tidyverse}`](www.tidyverse.org/). The tidyverse is a collection of packages that share common syntax logic and thus harmonize particularly well and cover a broad range of use cases. With\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\nfdz_install(\"tidyverse\") # on IAB servers with .Rprofile\n```\n:::\n\n\n\n\nthe following packages are installed:\n\nbroom, conflicted, cli, dbplyr, dplyr, dtplyr, forcats, ggplot2, googledrive, googlesheets4, haven, hms, httr, jsonlite, lubridate, magrittr, modelr, pillar, purrr, ragg, readr, readxl, reprex, rlang, rstudioapi, rvest, stringr, tibble, tidyr, xml2, tidyverse\n\nWe will get to know some of them during the course. The initially most important one is `{dplyr}`, which makes selecting cases and variables easier:\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Illustration based on the [`{dplyr}` Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)](./pic/103_dplyr_en.png){fig-align='center' width=80% height=80%}\n:::\n:::\n\n\n\n\n\nBut installation is only the first step; we need to load the package with `library()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # after once using install.packages(\"tidyverse\")\n```\n:::\n\n\n\n\n\n### Chaining Commands with `%>%` {#pipe}\n\nIn R, `dplyr` and other `{tidyverse}` packages use `%>%` (the pipe operator) to chain commands. This is a way to streamline commands and improve readability:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>%\n  filter(studs > 10000) %>%\n  select(uni,studs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            uni studs\n1    Uni Bremen 19173\n2 Uni Oldenburg 15643\n```\n\n\n:::\n:::\n\n\n\n\n\nHere, `%>%` takes the output of one function and passes it as an input to the next function. \nThis operator allows you to read and write code that closely resembles natural language.\n`%>%`[^pipe] simply stands for \"and then\". \n\n1. Call `dat1` *and then (`%>%`)*\n2. Select only rows where `studs` > 10000 *and then (`%>%`)*\n3. Keep only the `uni` column\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% filter(.,studs > 10000) %>% select(.,uni) # the dot represents the result of the previous step\n```\n:::\n\n\n\n\nUsually it's written just like this \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% filter(studs > 10000) %>% select(uni)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            uni\n1    Uni Bremen\n2 Uni Oldenburg\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n:::{.callout-tip}\n\nThe shortcut for `%>%` is STRG+SHIFT+m (cmd+shift+m on Mac)\n\n:::\n\nLet's a have a closer look at `filter()` and `select()`:\n\n### Selecting Observations with `filter()` {#filter}\n\nWith `filter()`, we can select rows from `dat1` based on conditions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% filter(uni == \"Uni Oldenburg\", studs > 1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni\n1 15643   210 1973 74.49048 Uni Oldenburg\n```\n\n\n:::\n:::\n\n\n\n\n\nThe selection does not change the original object `dat1`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni\n1 19173   322 1971 59.54348    Uni Bremen\n2  5333    67 1830 79.59701    Uni Vechta\n3 15643   210 1973 74.49048 Uni Oldenburg\n```\n\n\n:::\n:::\n\n\n\n\n\nIf we want to keep the result of our selection with `filter()` for further steps, we can store it in a new `data.frame` object:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nover_10k <- filter(dat1, studs > 10000)\nover_10k\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni\n1 19173   322 1971 59.54348    Uni Bremen\n2 15643   210 1973 74.49048 Uni Oldenburg\n```\n\n\n:::\n:::\n\n\n\n\n\n:::{.callout-tip collapse=\"true\"}\n### `filter()` helpers\n\n`{dplyr}` provides a number of helpers for `filter()`:\n\n-  greater/smaller than or equal to:  `<=` `>=`\n-  or: `|`\n-  one of: `%in%`\n-  within a given range:  `between()`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(dat1, studs >= 10000)\nfilter(dat1, studs <= 10000)\nfilter(dat1,studs > 10000 | profs < 200) # more than 10.000 Students *or* less than 200 professors\nfilter(dat1, gegr %in% c(1971,1830)) # founded 1971 or 1830\nfilter(dat1, between(gegr,1971,1830)) # founded between 1971 and 1830 (including)\n```\n:::\n\n\n\n\n:::\n\n### Selecting variables with `select()` {#select}\n\n`select()` allows us to select specific columns:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% select(uni,studs) # columns uni and studs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            uni studs\n1    Uni Bremen 19173\n2    Uni Vechta  5333\n3 Uni Oldenburg 15643\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% select(1:3) # column 1-3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr\n1 19173   322 1971\n2  5333    67 1830\n3 15643   210 1973\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1 %>% select(-profs) # all but profs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs gegr stu_prof           uni\n1 19173 1971 59.54348    Uni Bremen\n2  5333 1830 79.59701    Uni Vechta\n3 15643 1973 74.49048 Uni Oldenburg\n```\n\n\n:::\n:::\n\n\n\n\n\n:::{.callout-tip collapse=\"true\"}\n\n### `select()` helpers {#selecthelpers}\n\n-   `contains(\"b\")`: Variable name *contains* `...`, \n-   `matches()`: Variable selection using [*regular expressions*](https://jfjelstul.github.io/regular-expressions-tutorial/)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% select(contains(\"s\")) # all variables containing s\ndat1 %>% select(matches(\"s$\")) # all variables ending on s\n```\n:::\n\n\n\n\n\n\n\n\n:::\n\n\n\n### Selecting Rows with `slice()`\n\nA first function from `{tidyverse}` is `slice()`, which allows us to select rows:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice(dat1,1) # first row\nslice(dat1,2:3) # rows 2-3\nslice(dat1,c(1,3)) # rows 1 and 3\n```\n:::\n\n\n\n\n\n### Sorting data with `arrange()` {#arrange}\nAnother common task in data analysis is sorting datasets. For this, we use `arrange()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% arrange(studs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni\n1  5333    67 1830 79.59701    Uni Vechta\n2 15643   210 1973 74.49048 Uni Oldenburg\n3 19173   322 1971 59.54348    Uni Bremen\n```\n\n\n:::\n:::\n\n\n\n\n\nThis also works for `string` variables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% arrange(uni)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni\n1 19173   322 1971 59.54348    Uni Bremen\n2 15643   210 1973 74.49048 Uni Oldenburg\n3  5333    67 1830 79.59701    Uni Vechta\n```\n\n\n:::\n:::\n\n\n\n\n\nOf course, we can also sort by multiple variables; we just add more to `arrange()` and we can sort in descending order using `desc()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% arrange(desc(gegr), studs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni\n1 15643   210 1973 74.49048 Uni Oldenburg\n2 19173   322 1971 59.54348    Uni Bremen\n3  5333    67 1830 79.59701    Uni Vechta\n```\n\n\n:::\n:::\n\n\n\n\n(This doesn’t make much sense in this example.)\n\n## Variable type `factor`\n\n\nBut what if we want to assign a specific order that doesn't follow numeric or alphabetical order? For example, if we want to order the universities as follows: 1) Uni Oldenburg, 2) Uni Bremen, and 3) Uni Vechta.\n\nThis is where a third variable type comes in: `factor`.\n\nWith the `levels =` argument, we can define an order:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor(dat1$uni, levels = c(\"Uni Oldenburg\", \"Uni Bremen\", \"Uni Vechta\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Uni Bremen    Uni Vechta    Uni Oldenburg\nLevels: Uni Oldenburg Uni Bremen Uni Vechta\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1$uni_fct <- factor(dat1$uni, \n                       levels = c(\"Uni Oldenburg\", \"Uni Bremen\", \"Uni Vechta\"))\n```\n:::\n\n\n\n\n\nIf we now sort by `uni_fct`, the order of the `levels` is respected:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(dat1$uni_fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1 %>% arrange(uni_fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct\n1 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg\n2 19173   322 1971 59.54348    Uni Bremen    Uni Bremen\n3  5333    67 1830 79.59701    Uni Vechta    Uni Vechta\n```\n\n\n:::\n:::\n\n\n\n\n\nThis may seem trivial at the moment but is very useful later for ordering variables in plots or setting the reference category in regression models.\n\nWe can use the `levels =` and `labels =` for a lazy recode:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$gegr_fct <- factor(dat1$gegr,\n                       levels = c(1830,1971,1973) ,\n                       labels = c(\"early\",\"70s\",\"70s\")) # labels do not need to be unique\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct gegr_fct\n1 19173   322 1971 59.54348    Uni Bremen    Uni Bremen      70s\n2  5333    67 1830 79.59701    Uni Vechta    Uni Vechta    early\n3 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg      70s\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1 %>% arrange(desc(gegr_fct))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct gegr_fct\n1 19173   322 1971 59.54348    Uni Bremen    Uni Bremen      70s\n2 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg      70s\n3  5333    67 1830 79.59701    Uni Vechta    Uni Vechta    early\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1 %>% arrange(desc(gegr_fct),gegr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct gegr_fct\n1 19173   322 1971 59.54348    Uni Bremen    Uni Bremen      70s\n2 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg      70s\n3  5333    67 1830 79.59701    Uni Vechta    Uni Vechta    early\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n### [Exercise](#data3) {#ue_3}\n\n## Setting up a project {#rproj}\n\nIn general, it's worth setting up projects in RStudio. \nProjects are `.Rproj` files ![](./pic/rproj-icon.png){width=\"30px\"} that automatically set the working directory to where they are saved. This simplifies collaborative work: no matter who is working on a project or on which device, the project file ensures all paths are always relative to the project directory. Furthermore, version control via git, e.g., [github](www.github.com), and other functions can be set in the project file for all users. Also, the last open scripts remain open, making it easier to work on multiple projects.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/102_Rproj.png){fig-align='center' width=65% height=55%}\n:::\n:::\n\n\n\n\n\nWith `getwd()`, we can check if it worked:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"D:/Courses/R-Course\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/102_Rproj2.png){fig-align='center' width=75% height=70%}\n:::\n:::\n\n\n\n\n\nAlternatively, we could create an .Rproj project with the following command (here's an example of calling a package with `::`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrstudioapi::initializeProject(path = \"D:/Courses/R-Course\")\n```\n:::\n\n\n\n\n\nWe can open the project with:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrstudioapi::openProject(path = \"D:/Courses/R-Course\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n\n\n### 💡 Using projects to ensure reproducibility {#reproducibility}\n\nR-Projects are a great way to organize your work and help to ensure reproducibility in conjunction with the [FDZ `.Rprofile`](#fdz_install):\n\nBy default, the `.Rprofile` stores all packages installed via `fdz_install()` in your personal Documents folder on `Z:`, as you can see in the startup message in the path displayed as **Default package library:**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n- Default package library:             Z:/R/4-4\n```\n:::\n\n\n\n\n\nYou can check the directory where your library is kept using `.libPaths()` - R will install new packages in the first directory listed here.\n\nThis has the disadvantage that you might overwrite packages when working on different projects.\nIn the worst case, you could break code from older projects when updating to a newer version of a package.\nYou'll have to track down the original package version when you're trying to re-run code from the older project.  \n\n⚠️ This can be extremely painful and make you question what life decisions brought you here.\n\nTherefore, I recommend setting up a **project-specific** `.RProfile` for projects that require reprodicibility:  \n\n1️⃣ Copy the `.Rprofile` to your project root directory  \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.copy(from = paste0(\n                    dir(path = \"C:/Users/\",\n                        pattern = Sys.getenv(\"USERNAME\"), # find correct User-Folder on C:\n                        full.names = T),\n                    \"/Documents/.Rprofile\"\n                    ),\n          to = \".\"\n          )\n```\n:::\n\n\n\n\n\n2️⃣️ amend the first few lines so that packages are loaded and installed from within the project folder by modifying lines 11-19:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibdir <- \n  paste0(\n    \"Z:/R/\",         # redirects library/fdz_install to Z:/R/\n    R.version$major, # major Version\n    \"-\",\n    sub(R.version$minor, pattern = \"\\\\..+\", replacement = \"\") # minor version\n  )\n```\n:::\n\n\n\n\nFor instance, you could set a relative path to a subdirectory called \"library\" in your project:\n\n\n\n\n::: {.cell}\n\n```{#lst-code .r .cell-code}\nlibdir <- \n  paste0(\n    \"./library/\",    # adjust path here\n    R.version$major, # major Version\n    \"-\",\n    sub(R.version$minor, pattern = \"\\\\..+\", replacement = \"\") # minor version\n  )\n```\n:::\n\n\n\n\n\nThis will result in your packages being stored in `path/to/your/project/library/RX-Y` with X-Y being the R version.\nThe downside of this approach is that you'll need to (re-)install the packages you're using for your project, and storing identical packages in multiple directories can be inefficient in terms of memory usage.\n\n\n## Importing datasets {#import}\n\nIn most cases, we’ll use datasets that are already saved in a file and just need to be imported. There are countless ways to do this.\n\nIn this seminar, we’ll work with the Campus-File of PASS, whose parts are available as Stata files.\n\nTo import the dataset into R, we need to tell R the file path where the dataset is located. The file path depends on your device's folder structure; in this case, it would be \"D:/Courses/R-Course/\".\n\nOf course, the file path depends on where you saved the dataset:\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./pic/102_dateipfad_datei.png){fig-align='center' width=45% height=45%}\n:::\n:::\n\n\n\n\n\nWe need to inform R of this file path.\n\n### The import command\n\nNow we can use the actual import command `read.table`. For the path, we can just enter the quotation marks after `file =` and press the Tab key. Then we’ll see all subdirectories and tables in the project folder.[^2]\n\n[^2]: Sometimes the dataset is not in the project's subfolder, in which case the entire path can be specified in `read_dta()`: `pend <- read_dta(file = \"D:/Courses/R-Course/data/PENDDAT_cf_W13.dta\")`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\npend <- read_dta(\"./orig/PENDDAT_cf_W13.dta\") \n```\n:::\n\n\n\n\n\nThe import process consists of two parts: first, we specify the object name as `pend`, under which R will store the dataset. After the `<-` is the actual `read_dta()` command, which contains several options. First, we specify the exact dataset name, including the file extension.\n\n:::{.callout-important collapse=\"true\"}\n# R has problems with Windows-style `\\` in file paths\nUnfortunately, Windows systems use `\\` in file paths, which causes problems in R. Therefore, file paths must always be specified with `/` or alternatively with `\\\\`. RStudio can help a bit with the *CTRL + F*/Search & Replace function.\n:::\n\nThe object created is a `data.frame`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(pend)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n\nTechnically, it’s a `tibble`—an enhanced version of `data.frame` in the `tidyverse` that includes labels and provides additional information in its display, such as variable classes in the first row.\n\nIf we were to simply type `pend` here, the entire dataset would be displayed. For an overview, we can use `head`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(pend)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 123\n         pnr      hnr welle   pintjahr pintmon pintmod  zpsex   palter PD0400   \n       <dbl>    <dbl> <dbl+l> <dbl+lb> <dbl+l> <dbl+lb> <dbl+l> <dbl+> <dbl+lbl>\n1 1000001901 10000019 1 [Wav… 2007     5 [May]  1 [CAP… 2 [Fem… 36       2 [Rat…\n2 1000001902 10000019 1 [Wav… 2007     5 [May] NA       1 [Mal… 39       2 [Rat…\n3 1000001901 10000019 3 [Wav… 2009     3 [Mar…  1 [CAP… 2 [Fem… 38      -9 [Ite…\n4 1000002001 10000020 1 [Wav… 2007     4 [Apr…  1 [CAP… 1 [Mal… 66     -10 [Ite…\n5 1000002002 10000020 1 [Wav… 2007     4 [Apr…  1 [CAP… 2 [Fem… 61       3 [Rat…\n6 1000002002 10000020 2 [Wav… 2008     5 [May]  1 [CAP… 2 [Fem… 62       3 [Rat…\n# ℹ 114 more variables: PA0100 <dbl+lbl>, PA0200 <dbl+lbl>, PA0300 <dbl+lbl>,\n#   PA0445 <dbl+lbl>, PA0800 <dbl+lbl>, PA0900 <dbl+lbl>, PA1000 <dbl+lbl>,\n#   PSM0100 <dbl+lbl>, PEO0100a <dbl+lbl>, PEO0100b <dbl+lbl>,\n#   PEO0100c <dbl+lbl>, PEO0100d <dbl+lbl>, PEO0100e <dbl+lbl>,\n#   PEO0200a <dbl+lbl>, PEO0200b <dbl+lbl>, PEO0200c <dbl+lbl>,\n#   PEO0200d <dbl+lbl>, PEO0300a <dbl+lbl>, PEO0300b <dbl+lbl>,\n#   PEO0300c <dbl+lbl>, PEO0300d <dbl+lbl>, PEO0300e <dbl+lbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n\nWith `nrow` and `ncol`, we can check if it worked. The dataset should have 28424 rows and 123 columns:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(pend)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28424\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(pend)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123\n```\n\n\n:::\n:::\n\n\n\n\n\nOf course, we can also select rows and columns from this much larger dataset as we did before. For example, we can select the data from 2006 and store it under `pend06`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend06 <- pend %>% filter(pintjahr == 2006)\n```\n:::\n\n\n\n\n\nNaturally, `pend06` has significantly fewer rows than `pend`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(pend06)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 168\n```\n\n\n:::\n:::\n\n\n\n\n\nIf we want to see the exact ages of the respondents from `pend06`, we can call up the corresponding column with `pend06$palter`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend06$palter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<labelled<double>[168]>: Age (W1: gen. from P1; W2 ff.: best info.), gen.\n  [1] 71 66 64 64 63 51 64 65 26 38 41 63 58 58 69 45 59 37 28 63 56 29 29 49 47\n [26] 66 34 22 21 37 36 58 56 80 44 65 61 66 40 53 34 70 69 54 65 62 58 54 51 57\n [51] 72 52 25 34 55 44 68 73 46 87 74 83 46 40 62 58 66 41 53 71 66 79 54 42 68\n [76] 68 81 92 70 66 68 77 44 66 66 67 62 43 35 35 52 54 20 48 48 20 41 24 22 33\n[101] 55 41 50 36 19 52 25 36 37 29 37 36 43 49 16 59 28 19 43 44 30 43 50 50 53\n[126] 52 71 43 58 58 58 38 49 30 27 50 58 26 36 44 28 19 42 44 23 20 33 24 31 32\n[151] 31 44 50 58 45 57 37 62 46 52 50 47 40 62 40 19 28 35\n\nLabels:\n value                                      label\n   -10 Item not surveyed in questionnaire version\n    -9                  Item not surveyed in wave\n    -8                          Implausible value\n    -4              Question mistakenly not asked\n    -3                    Not applicable (filter)\n    -2                            Details refused\n    -1                                 Don't know\n```\n\n\n:::\n:::\n\n\n\n\n\nAs we’ve seen, there are many more variables in PASS than just `palter`, and not all have such meaningful names—like `PD0400`. To understand these variable names and the meaning of the values, we need the codebook.\n\nWe can also access a variable's `attributes()`—more on labels later.\n\n### [Exercise](#data4) {#ue_4}\n\n## Exporting objects\n\n::: callout-note\n# \n\nThe term *save* can sometimes lead to misunderstandings in R: does it mean\n\n(1) saving a dataset or other object to disk as .csv, .dta, .sav for access by other programs, or \n\n(2) simply storing the results internally in R under an object name? \n\nI avoid the word save and instead speak of exporting (Case 1: writing to a file) or storing (Case 2: storing results/values within R in an object).\n\n:::\n\nThe proprietary format in R for exporting `data.frame`s and reloading afterwards is `.RData` (comparable to `dta` in Stata):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(pend06, file = \"./data/pend06.RData\")\nrm(pend06) # delete pend06 from memory\n\npend06_neu <- readRDS(file = \"./data/pend06.RData\")\nhead(pend06) # does not exist anymore -> rm()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Objekt 'pend06' nicht gefunden\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(pend06_neu,n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 123\n         pnr      hnr welle   pintjahr pintmon  pintmod zpsex   palter PD0400   \n       <dbl>    <dbl> <dbl+l> <dbl+lb> <dbl+lb> <dbl+l> <dbl+l> <dbl+> <dbl+lbl>\n1 1000402601 10004026 1 [Wav… 2006     12 [Dec… 0 [CAT… 1 [Mal… 71     -10 [Ite…\n# ℹ 114 more variables: PA0100 <dbl+lbl>, PA0200 <dbl+lbl>, PA0300 <dbl+lbl>,\n#   PA0445 <dbl+lbl>, PA0800 <dbl+lbl>, PA0900 <dbl+lbl>, PA1000 <dbl+lbl>,\n#   PSM0100 <dbl+lbl>, PEO0100a <dbl+lbl>, PEO0100b <dbl+lbl>,\n#   PEO0100c <dbl+lbl>, PEO0100d <dbl+lbl>, PEO0100e <dbl+lbl>,\n#   PEO0200a <dbl+lbl>, PEO0200b <dbl+lbl>, PEO0200c <dbl+lbl>,\n#   PEO0200d <dbl+lbl>, PEO0300a <dbl+lbl>, PEO0300b <dbl+lbl>,\n#   PEO0300c <dbl+lbl>, PEO0300d <dbl+lbl>, PEO0300e <dbl+lbl>, …\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can also export and restore other objects.\nHowever, we need to `load()` them, which will result in restoring the previous object name:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(studs, file = \"./data/stud_vektor.RData\")\nrm(studs)\nstuds\nload(file = \"./data/stud_vektor.RData\") # studs is back with the same object name\nstuds\n```\n:::\n\n\n\n\n\nThis also works for multiple Objects:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave(studs,profs, file = \"./data/meine_vektoren.RData\")\nrm(studs,profs)\nstuds\nprofs\nload(file = \"./data/meine_vektoren.RData\") # studs & profs restored with the same name\nstuds\nprofs\n```\n:::\n\n\n\n\n\n### [Exercise](#data5) {#ue_5}\n\n\n## Overview: Importing and exporting data sets\n\n\n::: panel-tabset\n\n## Import options\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-material table table-striped table-hover table-condensed\" style=\"font-family: Roboto; margin-left: auto; margin-right: auto; font-size: 12px; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> file type </th>\n   <th style=\"text-align:left;\"> R function </th>\n   <th style=\"text-align:left;\"> R package </th>\n   <th style=\"text-align:left;\"> Comment </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> .csv </td>\n   <td style=\"text-align:left;font-family: monospace;\"> read.table() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> - </td>\n   <td style=\"text-align:left;\"> set delimiter with `sep = \";\"` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .Rdata (R format) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> readRDS </td>\n   <td style=\"text-align:left;font-family: monospace;\"> - </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> große .csv </td>\n   <td style=\"text-align:left;font-family: monospace;\"> vroom() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {vroom} </td>\n   <td style=\"text-align:left;\"> set delimiter using `delim = \";\"` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .dta (Stata) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> read_dta() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {haven} </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .dta (Stata - große Dateien) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> read.dta13() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {readstata13} </td>\n   <td style=\"text-align:left;\"> use convert.factors = F to import only numeric values <br> also imports files from newer Stata versions </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .dat (SPSS) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> read_spss() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {haven} </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .xlsx (Excel) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> read_xlsx() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {readxl} </td>\n   <td style=\"text-align:left;\"> use `sheet = 1`to specifiy which sheet you want </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n## Code\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# csv file\ndat1 <- read.table(file = \"Dateiname.csv\",sep = \";\")\n\n# Rdata\ndat1 <- readRDS(file = \"Dateiname.Rdata\")\n\n# large csv\nlibrary(vroom)\ndat1 <- vroom(file = \"Dateiname.csv\",delim = \";\")\n\n# Stata dta\nlibrary(haven)\ndat1 <- read_dta(file = \"Dateiname.dta\")\n\n# Stata large files\n# faster than read_dta(), but without labels\nlibrary(readstata13)\ndat1 <- read.dta13(file = \"Dateiname.dta\",convert.factors = F) \n\n# SPSS sav\ndat1 <- read_sav(file = \"Dateiname.sav\")\n\n# Excel\ndat1 <- read_xlsx(path = \"Dateiname.xlsx\", sheet = \"1\")\ndat1 <- read_xlsx(path = \"Dateiname.xlsx\", sheet = \"Tabellenblatt1\")\n```\n:::\n\n\n\n\n:::\n\n\n::: panel-tabset\n## Export options\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-material table table-striped table-hover table-condensed\" style=\"font-family: Roboto; margin-left: auto; margin-right: auto; font-size: 12px; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> file type </th>\n   <th style=\"text-align:left;\"> R function </th>\n   <th style=\"text-align:left;\"> R package </th>\n   <th style=\"text-align:left;\"> Comment </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> .Rdata (R format) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> saveRDS() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> - </td>\n   <td style=\"text-align:left;\"> all  variable properties remain </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .csv </td>\n   <td style=\"text-align:left;font-family: monospace;\"> write.table() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> - </td>\n   <td style=\"text-align:left;\"> use `sep = \";\"` to set delimiter br&gt;use row.names= F to suppress row numbering </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .dta (Stata) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> write_dta() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {haven} </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .dat (SPSS) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> write_spss() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {haven} </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> .xlsx (Excel) </td>\n   <td style=\"text-align:left;font-family: monospace;\"> write.xlsx() </td>\n   <td style=\"text-align:left;font-family: monospace;\"> {xlsx} </td>\n   <td style=\"text-align:left;\"> use `sheetName` to select excel sheet </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n## Code\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rdata\nsaveRDS(dat1,file = \"Dateiname.Rdata\")\n# csv\nwrite.table(dat1,file = \"Dateiname.csv\",sep = \";\",row.names = F)\n# dta\nlibrary(haven)\nwrite_dta(dat1,path = \"Dateiname.dta\")\n# sav\nlibrary(haven)\nwrite_sav(dat1,path = \"Dateiname.sav\")\n# xlsx\nlibrary(xlsx)\nwrite.xlsx(dat1,file = \"Dateiname.xlsx\", sheetName = \"Tabellenblatt 1\")\n```\n:::\n\n\n\n\n:::\n\n\n\n## Getting help\n\nR packages (often) come with very detailed help pages, which can either be called up directly from RStudio:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# help for packages\nvignette(\"dplyr\")\nvignette(package = \"dplyr\")\nvignette(\"rowwise\")\nhelp(\"dplyr\")\nhelp(package = \"dplyr\")\n\n\n# help for a specific function\n?select()\n```\n:::\n\n\n\n\n\nAlternatively, googling the package and function mostly gives you what you need [**R dplyr select()**](https://www.google.de/search?q=R+dplyr+select())\n\nOr refer to the CRAN site:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![[CRAN-Seite für {dplyr}](https://cran.r-project.org/web/packages/dplyr/index.html)](./pic/102_dplyr_vignette.png){width=488 height=30%}\n:::\n:::\n\n\n\n\n\n\n## Exercises\n### Exercise 1 {#data1}\n\n-   Create a `data.frame` object called `dat2`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 <- data.frame(studs = c(14954,47269 ,23659,9415 ,38079), \n                   profs = c(250,553,438 ,150,636),\n                   prom_recht = c(FALSE,TRUE,TRUE,TRUE,FALSE),\n                   gegr  = c(1971,1870,1457,1818,1995))\n```\n:::\n\n\n\n\n\n-   Do you see `dat2` in your environment?\n-   Print `dat2` in the console.\n-   Add the names of the universities as a new column to the dataset. The names are in this order:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"FH Aachen\",\"RWTH Aachen\",\"Uni Freiburg\",\"Uni Bonn\",\"FH Bonn-Rhein-Sieg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"FH Aachen\"          \"RWTH Aachen\"        \"Uni Freiburg\"      \n[4] \"Uni Bonn\"           \"FH Bonn-Rhein-Sieg\"\n```\n\n\n:::\n:::\n\n\n\n\n-   Display `dat2` - either in the console or using `View()`.\n-   Calculate the ratio of students per professor and store the results in a new variable. Check the result.\n-   Display only the third row of `dat2`.\n-   Display only the third column of `dat2`.\n\n*What would you do to copy `dat2` into an object called `df_unis`?*\n\n[Back to top](#ue_1)\n\n---\n\n### Exercise 2 {#data2}\n\n-   [Create a `.Rprofile` for the package installation](#fdz_install) in `C:\\Users\\*USERNAME*\\Documents`.\n-   Install the tidyverse packages using `fdz_install(\"tidyverse\")` after placing the `.Rprofile` file under `C:\\Users\\*USERNAME*\\Documents`.\n-   Use the `data.frame` `dat2` from Exercise 1.\n-   Use `filter` to display only the universities with fewer than 10,000 students. (Remember to install and load `{tidyverse}` with `library()`).\n-   Display the founding years (`gegr`) column of universities with the right to award doctorates (`prom_recht`).\n\n[Back to top](#ue_2)\n\n---\n\n### Exercise 3 {#data3}\n\n-   Continue using the dataset from Exercises 1 & 2 (dat2)\n-   Display only the universities that were founded in 1971, 1457, or 1995, and for these cases, show only the name and founding year.\n-   Sort the dataset according to the following order. (Create a `factor` variable that defines this order.)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"RWTH Aachen\", \"Uni Freiburg\", \"Uni Bonn\", \"FH Aachen\", \"FH Bonn-Rhein-Sieg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"RWTH Aachen\"        \"Uni Freiburg\"       \"Uni Bonn\"          \n[4] \"FH Aachen\"          \"FH Bonn-Rhein-Sieg\"\n```\n\n\n:::\n:::\n\n\n\n\n\n[Back to top](#ue_3)\n\n---\n\n### Exercise 4 {#data4}\n\n-   Create an [R project](#rproj) in your directory for this course.\n-   Save the personal data from the PASS-CampusFile (`PENDDAT_cf_W13.dta`) in your directory in the subfolder *orig*.\n-   Read the dataset `PENDDAT_cf_W13.dta` [as shown above](#import) into R and assign it to the object name `pend`.\n-   Use `head()` and `View()` to get an overview of the dataset.\n-   How many entries (rows) does the dataset contain?\n-   Display the variable names of `pend` using `names()`!\n-   How old is the respondent with the `pnr` 1000908201 in `welle` 10 (in `pintjahr` 2016)?\n  -   Display the wave (`welle`) and age (`palter`) of respondent with the `pnr` 1000908201?\n  -   Store the resulting data.frame in an object, e.g. `resp_1000908201`.\n\n[Back to top](#ue_4)\n\n---\n\n### Exercise 5 {#data5}\n\n-  Export the `data.frame` `resp_1000908201` created in the previous exercise as an `.Rdata` file.\n-  Load the exported `.Rdata` file under a different name, e.g., `resp_1000908201_new`.\n-  Did everything work? Compare the newly loaded object with the original one: `identical(resp_1000908201, resp_1000908201_new)` - are both objects identical?\n\n[Back to top](#ue_5)\n\n## Appendix\n\n### Alternatives to R Projects {#setwd}\n\nBesides setting up a project, you can also set the path using `setwd()` or directly specify it within `read_dta()` or other `read...()` commands. However, this approach is less portable to other machines. When someone else opens the `.Rproj` file, R automatically sets paths relative to the file's location. This is also true if the directory is moved on your device—R will automatically adjust the working directory.\n\nTo set the working directory with `setwd()`, insert the folder path within the parentheses. Make sure to replace any `\\` with `/`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"D:/Kurse/R_IAB\")\n```\n:::\n\n\n\n\n\nYou can check if it worked with `getwd()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\n\n\nThe path you set with `setwd()` should appear.\n\nAlternatively, you can provide the full path directly in `read_dta()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend <- haven::read_dta(\"C:/Kurse/R_IAB/orig/PENDDAT_cf_W13.dta\")\n```\n:::\n\n\n\n\n\n### Selecting Rows & Columns Without `{dplyr}` {#selfiltbase}\n\nBase R (without extensions like `{dplyr}`) can also filter datasets using square brackets `[]`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1[1, 1] # first row, first column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19173\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1[1, ]  # first row, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof        uni    uni_fct gegr_fct\n1 19173   322 1971 59.54348 Uni Bremen Uni Bremen      70s\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1[, 1]  # all rows, first column (equivalent to dat1$studs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19173  5333 15643\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1[, \"studs\"] # all rows, column named studs -> note the \"\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19173  5333 15643\n```\n\n\n:::\n:::\n\n\n\n\n\nYou can also select multiple rows or columns by using `c()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1[c(1, 2), ]  ## 1st & 2nd row, all columns\ndat1[, c(1, 3)]  ## all rows, 1st & 3rd column (equivalent to dat1$studs & dat1$stu_prof)\ndat1[, c(\"studs\", \"uni\")] ## all rows, columns named studs and uni\n```\n:::\n\n\n\n\n\nYou can also write conditions in these square brackets to make selections from `dat1`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 # full dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct gegr_fct\n1 19173   322 1971 59.54348    Uni Bremen    Uni Bremen      70s\n2  5333    67 1830 79.59701    Uni Vechta    Uni Vechta    early\n3 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg      70s\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1[dat1$uni == \"Uni Oldenburg\", ] # Rows where uni equals \"Uni Oldenburg\", all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct gegr_fct\n3 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg      70s\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1$studs[dat1$uni == \"Uni Oldenburg\"] # Just check the student count: no comma needed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15643\n```\n\n\n:::\n:::\n\n\n\n\n\nThis works as expected, and we can expand it:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1[dat1$uni == \"Uni Oldenburg\" & dat1$studs > 10000, ] # & means AND\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct gegr_fct\n3 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg      70s\n```\n\n\n:::\n:::\n\n\n\n\n\nYou can also use the OR operator:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1[dat1$uni == \"Uni Oldenburg\" | dat1$studs > 10000, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr stu_prof           uni       uni_fct gegr_fct\n1 19173   322 1971 59.54348    Uni Bremen    Uni Bremen      70s\n3 15643   210 1973 74.49048 Uni Oldenburg Uni Oldenburg      70s\n```\n\n\n:::\n:::\n\n\n\n\n\n### `select()` vs `$`\n\nWhen you use `select()` to pick a specific variable, it preserves the data structure as a `data.frame()`, whereas `dat1$variablename` extracts the column as a vector (a series of values):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1$studs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19173  5333 15643\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(dat1$studs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1$studs / 20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 958.65 266.65 782.15\n```\n\n\n:::\n:::\n\n\n\n\n\n`select()` keeps the values as a column in a `data.frame`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 %>% select(studs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs\n1 19173\n2  5333\n3 15643\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1 %>% select(studs) %>% class()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndat1 %>% select(studs) / 20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   studs\n1 958.65\n2 266.65\n3 782.15\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}