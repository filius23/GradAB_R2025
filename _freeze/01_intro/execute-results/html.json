{
  "hash": "df4f4ea76cb184e9a00956becfd87a79",
  "result": {
    "engine": "knitr",
    "markdown": "# Getting started with R\n\n\n\n\n\n\n\n\n\n## Installing and Setting Up R & RStudio\n\nR is a completely free program that you can download from [CRAN](https://cran.r-project.org/). The RStudio extension is also free and can be downloaded [here](https://www.rstudio.com/products/rstudio/download/#download). RStudio enhances R by providing a significantly more informative and appealing interface, help, and auto-completion when writing syntax, as well as an overall improved user interface. However, RStudio is an extension of R, so you need both programs.\n\n::: callout-note\nInstall R first and then RStudio, so that RStudio recognizes the installed R version, and the two programs usually connect automatically. R is essentially the engine, and RStudio is our cockpit. We could work directly with R, but RStudio offers a more comfortable option and a better overview.\n:::\n\n::: {#fig-rstudio layout-ncol=\"2\"}\n![](./pic/101_engine_R.png){width=\"200\"} \n\n![](./pic/101_cockpit_rstudio2.png){width=\"200\"}\n\nR and RStudio\n:::\n\n## Setting Up RStudio\n\nAfter successful installation, open the RStudio application ![](./pic/rstudio-icon.png){width=\"20px\"} and you should see the following view:\n\n![](./pic/101_RStudio.png)\n\nTo avoid problems when working with R in the future, please disable the automatic saving and loading of the workspace. To do this, go to the appropriate menu under the \"Tools -> Global options\" tab, disable \"Restore .RData into workspace at startup,\" and set \"Save workspace to .RData on exit:\" to `Never`. Otherwise, RStudio will save all loaded objects when you end the session and automatically load them the next time you open the program, which can lead to problems.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_setup.png)\n\nConfirm the settings with \"Apply\" and close the window with \"OK.\"\n\n## First Steps in R\n\nAfter these basic settings, we can start with the first steps in R. To do this, first open a script by clicking on the white icon in the top left corner or pressing CTRL/Command + Shift + N simultaneously.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_script2.png){width=\"438\"}\n\nA fourth window opens, so you should now see the following view:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_script.png)\n\nThis script editor is where we will create and execute commands. The script editor serves as a collection of all commands to be executed. We can save these collections to revisit them later, and, more importantly, we can share command collections with others or use scripts from others for ourselves. So, we first draft a calculation in the script editor:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_script0.png){width=\"340\"}\n\nTo execute it, click on the line to be executed so that the cursor is in that line, and then press CTRL and Enter simultaneously (Mac users: Command and Enter):\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {#fig-keys layout-ncol=\"2\"}\n![](./pic/101_keyboard_pc.png){width=\"390\"}\n\n![](./pic/101_keyboard_mac.png){width=\"390\"}\n\nShortcuts for Calculations\n:::\n\nR outputs the results in the console below:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_Erste_Rechnung.png)\n\nThis also works for multiple calculations at once by selecting multiple lines and then pressing CTRL and Enter again (Mac users: Command and Enter):\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_Rechnung.png)\n\nInputs from the script editor and results from the console will be presented like this in the future:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\n3-4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1\n```\n\n\n:::\n\n```{.r .cell-code}\n5*6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n\n```{.r .cell-code}\n7/8\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.875\n```\n\n\n:::\n:::\n\n\n\n\nOf course, R also handles longer calculations, such as following the order of operations:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+3*2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n(2+3)*2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n\n\nOther operations are also possible:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4^2 ## 4²\nsqrt(4) ## Square root \nexp(1) ## Exponential function (Euler's number)\nlog(5) ## Natural logarithm\nlog(exp(5)) ## log and exp cancel each other out\n```\n:::\n\n\n\n\nWe can create sequences of numbers using `seq()` or `:`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2:6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(2,11,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  5  8 11\n```\n\n\n:::\n:::\n\n\n\n\n### Creating Objects\n\nSo far, we have always displayed our calculations directly.\nFor more extensive calculations—since we want to work with datasets starting in the next chapter—we want to save the intermediate steps.\n\nResults can be saved as objects under any name using `<-`. R will then not display the result but will repeat the command in the console:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 4/2\n```\n:::\n\n\n\n\nIn the \"Environment\" window at the top right, you can now see the stored object `x`:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_Environment2.png)\n\nWe can retrieve it later:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nAdditionally, we can use objects in calculations—we simply use `x` and create, for example, `y`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- x * 5\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_Environment.png)\n\n### Storing Multiple Values\n\nWith `c()`, we can store multiple values under one object, and these can also be used in calculations:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 <- c(1,2,3)\nx1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nx1* 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 6\n```\n\n\n:::\n:::\n\n\n\n\nWith `length()`, we can check the number of stored values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny1 <- c(10,11,9)\ny1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10 11  9\n```\n\n\n:::\n\n```{.r .cell-code}\ny1/x1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.0  5.5  3.0\n```\n\n\n:::\n:::\n\n\n\n\n`ls()` lists all existing objects, we can use the `pattern =` option to display only objects with a name that contains \"1\":\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"path\" \"x\"    \"x1\"   \"y\"    \"y1\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nls(pattern = \"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x1\" \"y1\"\n```\n\n\n:::\n:::\n\n\n\n\n### Deleting Values\n\nOf course, we can also delete objects using `rm()`. If we try to call a non-existent object, we will get an error message:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x1)\nx1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Objekt 'x1' nicht gefunden\n```\n\n\n:::\n:::\n\n\n\n\n\n\nWith `rm(list = ls())`, all objects can be removed from the environment.\n\n### Saving Scripts\n\nWe can save the script to call it again later.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n![](./pic/101_RStudio_script3.png){width=\"342\"}\n\nIt is important to give the saved file the extension \".R\", for example, \"01_Script.R\".\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n\n### Comments\n\nBesides the actual commands, comments are a central part of a data analysis syntax.\nThis allows future users (especially ourselves in 3 weeks or 2 years) to understand what is happening. Comments in R can be added with `#`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+ 5 # this is a comment\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\n2+ # a comment can also be placed here\n  5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n( 2 + # a \n    3) * # comment\n  2 # across multiple lines\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n\n\n**Tip:** It’s best to create a folder right away where you can store all R scripts and datasets from this course.\n\n### Structuring Scripts\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Heading 1 ----\n\n## Section 1.1 ----\n3+2*4\n3+2*3\n## Section 1.2 ----\n3+2*sqrt(3)\n\n# Heading 2 ----\nx <- c(2,6,8,2,35)\ny <- seq(2,10,2)\n\ny/x\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n![](./pic/101_skript_überschriften.png){width=\"742\"}\n\n## Exercises\n\n-   Store the number of students at the University of Oldenburg (15643) in `stud`.\n-   Store the number of professorships at the University of Oldenburg (210) in `prof`.\n-   Calculate the number of students per professorship at the University of Oldenburg using the objects `stud` and `prof`.\n-   Store the result in `studprof` and recall the object again!\n-   Do you see the created variables in the Environment window?\n-   Store the student numbers of the University of Bremen (19173), University of Vechta (5333), and University of Oldenburg (15643) together in `studs`.\n-   Store the number of professors at the University of Bremen (322), University of Vechta (67), and University of Oldenburg (210) together in `profs`.\n-   Calculate the number of students per professorship for all three universities.\n-   You also want to include the student numbers (14000) and professorships (217) of the University of Osnabrück in `studs` and `profs`. How would you do that?\n-   Calculate the ratio of students to professorships for all four universities!\n-   Delete the object `stud`. How can you tell that it worked?\n-   Delete all objects from the Environment. How can you tell that it worked?",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}